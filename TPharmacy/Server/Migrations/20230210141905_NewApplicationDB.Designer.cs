// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TPharmacy.Server.Data;

namespace TPharmacy.Server.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20230210141905_NewApplicationDB")]
    partial class NewApplicationDB
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.17")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("IdentityServer4.EntityFramework.Entities.DeviceFlowCodes", b =>
                {
                    b.Property<string>("UserCode")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("ClientId")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Data")
                        .IsRequired()
                        .HasMaxLength(50000)
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("DeviceCode")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("Expiration")
                        .IsRequired()
                        .HasColumnType("datetime2");

                    b.Property<string>("SessionId")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("SubjectId")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("UserCode");

                    b.HasIndex("DeviceCode")
                        .IsUnique();

                    b.HasIndex("Expiration");

                    b.ToTable("DeviceCodes");
                });

            modelBuilder.Entity("IdentityServer4.EntityFramework.Entities.PersistedGrant", b =>
                {
                    b.Property<string>("Key")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("ClientId")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("ConsumedTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Data")
                        .IsRequired()
                        .HasMaxLength(50000)
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("Expiration")
                        .HasColumnType("datetime2");

                    b.Property<string>("SessionId")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("SubjectId")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Key");

                    b.HasIndex("Expiration");

                    b.HasIndex("SubjectId", "ClientId", "Type");

                    b.HasIndex("SubjectId", "SessionId", "Type");

                    b.ToTable("PersistedGrants");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");

                    b.HasData(
                        new
                        {
                            Id = "staff",
                            ConcurrencyStamp = "41810928-dda7-4c5e-b71b-22592513f905",
                            Name = "Staff",
                            NormalizedName = "STAFF"
                        },
                        new
                        {
                            Id = "customer",
                            ConcurrencyStamp = "a52bb95c-5f51-49dc-8fb8-f0ed61e75078",
                            Name = "Customer",
                            NormalizedName = "CUSTOMER"
                        },
                        new
                        {
                            Id = "admin",
                            ConcurrencyStamp = "aa6acf63-e9c4-45ac-a5f6-768bfcc2352a",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "pharmacist",
                            ConcurrencyStamp = "f6b3c9a4-8ad9-4ff2-8fbc-34d1cad79a38",
                            Name = "Pharmacist",
                            NormalizedName = "PHARMACIST"
                        },
                        new
                        {
                            Id = "packer",
                            ConcurrencyStamp = "953e5c21-5949-4c38-9133-bec66e3b8bcc",
                            Name = "Packer",
                            NormalizedName = "PACKER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");

                    b.HasData(
                        new
                        {
                            UserId = "3781efa7-66dc-47f0-860f-e506d04102s1",
                            RoleId = "staff"
                        },
                        new
                        {
                            UserId = "3781efa7-66dc-47f0-860f-e506d04102s1",
                            RoleId = "admin"
                        },
                        new
                        {
                            UserId = "3781efa7-66dc-47f0-860f-e506d04102s2",
                            RoleId = "staff"
                        },
                        new
                        {
                            UserId = "3781efa7-66dc-47f0-860f-e506d04102s2",
                            RoleId = "pharmacist"
                        },
                        new
                        {
                            UserId = "3781efa7-66dc-47f0-860f-e506d04102s3",
                            RoleId = "staff"
                        },
                        new
                        {
                            UserId = "3781efa7-66dc-47f0-860f-e506d04102s3",
                            RoleId = "packer"
                        },
                        new
                        {
                            UserId = "3781efa7-66dc-47f0-860f-e506d04102c1",
                            RoleId = "customer"
                        },
                        new
                        {
                            UserId = "3781efa7-66dc-47f0-860f-e506d04102c2",
                            RoleId = "customer"
                        },
                        new
                        {
                            UserId = "3781efa7-66dc-47f0-860f-e506d04102c3",
                            RoleId = "customer"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("TPharmacy.Server.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("Role")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");

                    b.HasData(
                        new
                        {
                            Id = "3781efa7-66dc-47f0-860f-e506d04102s1",
                            AccessFailedCount = 0,
                            Address = "TPharmacy",
                            ConcurrencyStamp = "b1be23b9-5d53-44d7-a8d0-9a31da94a2d6",
                            Email = "june@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = true,
                            Name = "June",
                            NormalizedEmail = "JUNE@GMAIL.COM",
                            NormalizedUserName = "JUNE@GMAIL.COM",
                            Password = "June1234*",
                            PasswordHash = "AQAAAAEAACcQAAAAEDlPBg2F0AvR2J8QMlSsOruAa++esC0bsR5NP1gqqzFkl6FYpng5BVJdNqXMxOiMdg==",
                            PhoneNumber = "9273 8983",
                            PhoneNumberConfirmed = true,
                            Role = "Staff",
                            SecurityStamp = "40be27a8-ebbc-441e-881a-1344913db6b7",
                            TwoFactorEnabled = false,
                            UserName = "june@gmail.com"
                        },
                        new
                        {
                            Id = "3781efa7-66dc-47f0-860f-e506d04102s2",
                            AccessFailedCount = 0,
                            Address = "TPharmacy",
                            ConcurrencyStamp = "98d5d82a-adb6-42ca-940f-e5681c6b340f",
                            Email = "woon@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = true,
                            Name = "Woon",
                            NormalizedEmail = "WOON@GMAIL.COM",
                            NormalizedUserName = "WOON@GMAIL.COM",
                            Password = "June1234*",
                            PasswordHash = "AQAAAAEAACcQAAAAEMvG3laj6LV3prxXLHpnor6Y9oNVKlSLV2/Bf0IAo+W5DtB1mo/EaNhqe6wXdKcW8Q==",
                            PhoneNumber = "9287 2324",
                            PhoneNumberConfirmed = true,
                            Role = "Staff",
                            SecurityStamp = "5f397f57-5855-4cd9-a6db-a7d7a79dcd7e",
                            TwoFactorEnabled = false,
                            UserName = "woon@gmail.com"
                        },
                        new
                        {
                            Id = "3781efa7-66dc-47f0-860f-e506d04102s3",
                            AccessFailedCount = 0,
                            Address = "TPharmacy",
                            ConcurrencyStamp = "7e085361-b443-43ad-8bfc-1ab9b81af9b8",
                            Email = "kate@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = true,
                            Name = "Kate",
                            NormalizedEmail = "KATE@GMAIL.COM",
                            NormalizedUserName = "KATE@GMAIL.COM",
                            Password = "June1234*",
                            PasswordHash = "AQAAAAEAACcQAAAAEBjwtwgrir2Ac9XZ0W+EwTuG+EEkm3s8nt/TayLb7np3mENqR7M+a0ETMwaMjVw1EQ==",
                            PhoneNumber = "6329 9823",
                            PhoneNumberConfirmed = true,
                            Role = "Staff",
                            SecurityStamp = "5effe969-2040-4902-a9ea-10a682697e44",
                            TwoFactorEnabled = false,
                            UserName = "kate@gmail.com"
                        },
                        new
                        {
                            Id = "3781efa7-66dc-47f0-860f-e506d04102c1",
                            AccessFailedCount = 0,
                            Address = "Tampines Ave 1",
                            ConcurrencyStamp = "a6c26f0e-b8f4-4478-8881-ed207b9bd3f4",
                            Email = "james@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = true,
                            Name = "James",
                            NormalizedEmail = "JAMES@GMAIL.COM",
                            NormalizedUserName = "JAMES@GMAIL.COM",
                            Password = "June1234*",
                            PasswordHash = "AQAAAAEAACcQAAAAEMtIH+6u1X+B//lv6+U1qdIPbNvbGzzVY6A9b5/USdcdMRMMnCR8Wd8LtD2CevdNUQ==",
                            PhoneNumber = "8211 7319",
                            PhoneNumberConfirmed = true,
                            Role = "Customer",
                            SecurityStamp = "23df0627-e5cb-43b5-939f-f6bd50d823c9",
                            TwoFactorEnabled = false,
                            UserName = "james@gmail.com"
                        },
                        new
                        {
                            Id = "3781efa7-66dc-47f0-860f-e506d04102c2",
                            AccessFailedCount = 0,
                            Address = "Bedok Ave 1",
                            ConcurrencyStamp = "e3eaf0eb-c4fa-4018-bfd6-a2b634ec4240",
                            Email = "alice@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = true,
                            Name = "Alice",
                            NormalizedEmail = "ALICE@GMAIL.COM",
                            NormalizedUserName = "ALICE@GMAIL.COM",
                            Password = "June1234*",
                            PasswordHash = "AQAAAAEAACcQAAAAEJmifeE6Vtv4ktDQh6kVsv27BoOCCgt5ifGSAUNC767yTTGG5i/hcVEtMEOKs5IrYw==",
                            PhoneNumber = "8329 7433",
                            PhoneNumberConfirmed = true,
                            Role = "Customer",
                            SecurityStamp = "e64f7a7e-da48-49f2-996f-717c2f6c4d5e",
                            TwoFactorEnabled = false,
                            UserName = "alice@gmail.com"
                        },
                        new
                        {
                            Id = "3781efa7-66dc-47f0-860f-e506d04102c3",
                            AccessFailedCount = 0,
                            Address = "Jurong Ave 1",
                            ConcurrencyStamp = "1726baea-f358-46d1-aec9-ebc80e2710e9",
                            Email = "sheila@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = true,
                            Name = "Sheila",
                            NormalizedEmail = "SHEILA@GMAIL.COM",
                            NormalizedUserName = "SHEILA@GMAIL.COM",
                            Password = "June1234*",
                            PasswordHash = "AQAAAAEAACcQAAAAEMVZIzcswk63sU2RCtaT0LS/6Th2XGUfHnxwwhD+iCLjGwpD6mJQTcxVFvGsEsJTCg==",
                            PhoneNumber = "9436 7238",
                            PhoneNumberConfirmed = true,
                            Role = "Customer",
                            SecurityStamp = "a347258c-8302-4fe3-a3bc-7dd4a17af285",
                            TwoFactorEnabled = false,
                            UserName = "sheila@gmail.com"
                        });
                });

            modelBuilder.Entity("TPharmacy.Shared.Domain.Consultation", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("ConDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ConDesc")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("ConDuration")
                        .HasColumnType("int");

                    b.Property<decimal>("ConFee")
                        .HasColumnType("decimal(7,2)");

                    b.Property<string>("ConStatus")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CustomerID")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateUpdated")
                        .HasColumnType("datetime2");

                    b.Property<int?>("StaffID")
                        .HasColumnType("int");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("CustomerID");

                    b.HasIndex("StaffID");

                    b.ToTable("Consultations");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            ConDate = new DateTime(2023, 2, 10, 22, 19, 4, 833, DateTimeKind.Local).AddTicks(1287),
                            ConDesc = "Flu Consultation",
                            ConDuration = 60,
                            ConFee = 35.50m,
                            ConStatus = "Completed",
                            CreatedBy = "Woon",
                            CustomerID = 1,
                            DateCreated = new DateTime(2023, 2, 10, 22, 19, 4, 833, DateTimeKind.Local).AddTicks(2671),
                            DateUpdated = new DateTime(2023, 2, 10, 22, 19, 4, 833, DateTimeKind.Local).AddTicks(2683),
                            StaffID = 2,
                            UpdatedBy = "System"
                        },
                        new
                        {
                            ID = 2,
                            ConDate = new DateTime(2023, 2, 10, 22, 19, 4, 833, DateTimeKind.Local).AddTicks(2691),
                            ConDesc = "Eczema Consultation",
                            ConDuration = 45,
                            ConFee = 30.50m,
                            ConStatus = "Pending",
                            CreatedBy = "Woon",
                            CustomerID = 3,
                            DateCreated = new DateTime(2023, 2, 10, 22, 19, 4, 833, DateTimeKind.Local).AddTicks(2694),
                            DateUpdated = new DateTime(2023, 2, 10, 22, 19, 4, 833, DateTimeKind.Local).AddTicks(2695),
                            StaffID = 2,
                            UpdatedBy = "System"
                        });
                });

            modelBuilder.Entity("TPharmacy.Shared.Domain.Customer", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CusAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CusEmail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CusName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("CusNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CusPassword")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateUpdated")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("Customers");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            CreatedBy = "System",
                            CusAddress = "Tampines Ave 1",
                            CusEmail = "james@gmail.com",
                            CusName = "James",
                            CusNumber = "87439653",
                            CusPassword = "June1234*",
                            DateCreated = new DateTime(2023, 2, 10, 22, 19, 4, 832, DateTimeKind.Local).AddTicks(767),
                            DateUpdated = new DateTime(2023, 2, 10, 22, 19, 4, 832, DateTimeKind.Local).AddTicks(785),
                            UpdatedBy = "System"
                        },
                        new
                        {
                            ID = 2,
                            CreatedBy = "System",
                            CusAddress = "Bedok Ave 1",
                            CusEmail = "alice@gmail.com",
                            CusName = "Alice",
                            CusNumber = "96512845",
                            CusPassword = "June1234*",
                            DateCreated = new DateTime(2023, 2, 10, 22, 19, 4, 832, DateTimeKind.Local).AddTicks(791),
                            DateUpdated = new DateTime(2023, 2, 10, 22, 19, 4, 832, DateTimeKind.Local).AddTicks(792),
                            UpdatedBy = "System"
                        },
                        new
                        {
                            ID = 3,
                            CreatedBy = "System",
                            CusAddress = "Jurong Ave 1",
                            CusEmail = "sheila@gmail.com",
                            CusName = "Sheila",
                            CusNumber = "87511773",
                            CusPassword = "June1234*",
                            DateCreated = new DateTime(2023, 2, 10, 22, 19, 4, 832, DateTimeKind.Local).AddTicks(794),
                            DateUpdated = new DateTime(2023, 2, 10, 22, 19, 4, 832, DateTimeKind.Local).AddTicks(795),
                            UpdatedBy = "System"
                        });
                });

            modelBuilder.Entity("TPharmacy.Shared.Domain.Order", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CustomerID")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateUpdated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("OrderDateTime")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("OrderFee")
                        .HasColumnType("decimal(7,2)");

                    b.Property<decimal>("OrderItemTotal")
                        .HasColumnType("decimal(7,2)");

                    b.Property<int>("OrderStatus")
                        .HasColumnType("int");

                    b.Property<decimal>("OrderTotal")
                        .HasColumnType("decimal(7,2)");

                    b.Property<int>("StaffID")
                        .HasColumnType("int");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("CustomerID");

                    b.HasIndex("StaffID");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("TPharmacy.Shared.Domain.OrderItem", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateUpdated")
                        .HasColumnType("datetime2");

                    b.Property<int>("OrderID")
                        .HasColumnType("int");

                    b.Property<int>("OrderItemQtny")
                        .HasColumnType("int");

                    b.Property<decimal>("OrderItemTotal")
                        .HasColumnType("decimal(7,2)");

                    b.Property<int>("ProductID")
                        .HasColumnType("int");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("OrderID");

                    b.HasIndex("ProductID");

                    b.ToTable("OrderItems");
                });

            modelBuilder.Entity("TPharmacy.Shared.Domain.Payment", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateUpdated")
                        .HasColumnType("datetime2");

                    b.Property<int>("OrderID")
                        .HasColumnType("int");

                    b.Property<string>("PayCardInfo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("PayFee")
                        .HasColumnType("decimal(7,2)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("OrderID");

                    b.ToTable("Payments");
                });

            modelBuilder.Entity("TPharmacy.Shared.Domain.Prescription", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ConsultationID")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateUpdated")
                        .HasColumnType("datetime2");

                    b.Property<int>("PresQty")
                        .HasColumnType("int");

                    b.Property<int>("ProductID")
                        .HasColumnType("int");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("ConsultationID");

                    b.HasIndex("ProductID");

                    b.ToTable("Prescriptions");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            ConsultationID = 1,
                            CreatedBy = "System",
                            DateCreated = new DateTime(2023, 2, 10, 22, 19, 4, 832, DateTimeKind.Local).AddTicks(5114),
                            DateUpdated = new DateTime(2023, 2, 10, 22, 19, 4, 832, DateTimeKind.Local).AddTicks(5136),
                            PresQty = 1,
                            ProductID = 4,
                            UpdatedBy = "System"
                        },
                        new
                        {
                            ID = 2,
                            ConsultationID = 2,
                            CreatedBy = "System",
                            DateCreated = new DateTime(2023, 2, 10, 22, 19, 4, 832, DateTimeKind.Local).AddTicks(5140),
                            DateUpdated = new DateTime(2023, 2, 10, 22, 19, 4, 832, DateTimeKind.Local).AddTicks(5141),
                            PresQty = 2,
                            ProductID = 4,
                            UpdatedBy = "System"
                        });
                });

            modelBuilder.Entity("TPharmacy.Shared.Domain.Product", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateUpdated")
                        .HasColumnType("datetime2");

                    b.Property<string>("ProdBrand")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProdCategory")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProdDesc")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ProdImg")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProdName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<decimal>("ProdPrice")
                        .HasColumnType("decimal(7,2)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            CreatedBy = "System",
                            DateCreated = new DateTime(2023, 2, 10, 22, 19, 4, 828, DateTimeKind.Local).AddTicks(6992),
                            DateUpdated = new DateTime(2023, 2, 10, 22, 19, 4, 829, DateTimeKind.Local).AddTicks(6969),
                            ProdBrand = "Blackmores",
                            ProdCategory = "Supplement",
                            ProdDesc = "BLACKMORES Bio Vitamin C 1000mg 120 Tablets",
                            ProdImg = "Vitamin C .jpeg",
                            ProdName = "Vitamin C",
                            ProdPrice = 35.00m,
                            UpdatedBy = "System"
                        },
                        new
                        {
                            ID = 2,
                            CreatedBy = "System",
                            DateCreated = new DateTime(2023, 2, 10, 22, 19, 4, 829, DateTimeKind.Local).AddTicks(8125),
                            DateUpdated = new DateTime(2023, 2, 10, 22, 19, 4, 829, DateTimeKind.Local).AddTicks(8131),
                            ProdBrand = "Swisse",
                            ProdCategory = "Supplement",
                            ProdDesc = "Swisse Omega 3 Fish Oil 1500mg 100 Tablets",
                            ProdImg = "Omega 3 Fish Oil .jpeg",
                            ProdName = "Omega 3 Fish Oil",
                            ProdPrice = 58.00m,
                            UpdatedBy = "System"
                        },
                        new
                        {
                            ID = 3,
                            CreatedBy = "System",
                            DateCreated = new DateTime(2023, 2, 10, 22, 19, 4, 829, DateTimeKind.Local).AddTicks(8134),
                            DateUpdated = new DateTime(2023, 2, 10, 22, 19, 4, 829, DateTimeKind.Local).AddTicks(8135),
                            ProdBrand = "Wastons",
                            ProdCategory = "Supplement",
                            ProdDesc = "Wastons Calcium 500mg 150 Tablets",
                            ProdImg = "Calcium .jpeg",
                            ProdName = "Calcium",
                            ProdPrice = 45.00m,
                            UpdatedBy = "System"
                        },
                        new
                        {
                            ID = 4,
                            CreatedBy = "System",
                            DateCreated = new DateTime(2023, 2, 10, 22, 19, 4, 829, DateTimeKind.Local).AddTicks(8137),
                            DateUpdated = new DateTime(2023, 2, 10, 22, 19, 4, 829, DateTimeKind.Local).AddTicks(8138),
                            ProdBrand = "Telfast",
                            ProdCategory = "Prescriptions",
                            ProdDesc = "Telfast Panadol 10mg",
                            ProdImg = "Panadol .jpeg",
                            ProdName = "Panadol",
                            ProdPrice = 20.00m,
                            UpdatedBy = "System"
                        },
                        new
                        {
                            ID = 5,
                            CreatedBy = "System",
                            DateCreated = new DateTime(2023, 2, 10, 22, 19, 4, 829, DateTimeKind.Local).AddTicks(8142),
                            DateUpdated = new DateTime(2023, 2, 10, 22, 19, 4, 829, DateTimeKind.Local).AddTicks(8143),
                            ProdBrand = "Cellucor",
                            ProdCategory = "Sports",
                            ProdDesc = "Cellucor Whey Protein Powder 5LBS",
                            ProdImg = "Whey Protein Powder .jpeg",
                            ProdName = "Whey Protein Powder",
                            ProdPrice = 60.00m,
                            UpdatedBy = "System"
                        },
                        new
                        {
                            ID = 6,
                            CreatedBy = "System",
                            DateCreated = new DateTime(2023, 2, 10, 22, 19, 4, 829, DateTimeKind.Local).AddTicks(8146),
                            DateUpdated = new DateTime(2023, 2, 10, 22, 19, 4, 829, DateTimeKind.Local).AddTicks(8147),
                            ProdBrand = "Solaray",
                            ProdCategory = "Baby",
                            ProdDesc = "Solaray Kids Multi Vitamins & Minerals Gummies 120S",
                            ProdImg = "Kids Multi Vitamins & Minerals Gummies .jpeg",
                            ProdName = "Kids Multi Vitamins & Minerals Gummies",
                            ProdPrice = 30.00m,
                            UpdatedBy = "System"
                        },
                        new
                        {
                            ID = 7,
                            CreatedBy = "System",
                            DateCreated = new DateTime(2023, 2, 10, 22, 19, 4, 829, DateTimeKind.Local).AddTicks(8151),
                            DateUpdated = new DateTime(2023, 2, 10, 22, 19, 4, 829, DateTimeKind.Local).AddTicks(8152),
                            ProdBrand = "Claritin",
                            ProdCategory = "Prescriptions",
                            ProdDesc = "CLARITYN - Non - drowsy 24H Allergy Relief Tablets 10's",
                            ProdImg = "Clarityn .jpeg",
                            ProdName = "Clarityn",
                            ProdPrice = 25.00m,
                            UpdatedBy = "System"
                        },
                        new
                        {
                            ID = 8,
                            CreatedBy = "System",
                            DateCreated = new DateTime(2023, 2, 10, 22, 19, 4, 829, DateTimeKind.Local).AddTicks(8159),
                            DateUpdated = new DateTime(2023, 2, 10, 22, 19, 4, 829, DateTimeKind.Local).AddTicks(8160),
                            ProdBrand = "Strepsils",
                            ProdCategory = "Prescriptions",
                            ProdDesc = "Lozenges Soothing Relief for Sore Throat Soothing Honey & Lemon 24s",
                            ProdImg = "Strepsils Lozenges .jpeg",
                            ProdName = "Soothing Relief Lozenges",
                            ProdPrice = 20.00m,
                            UpdatedBy = "System"
                        });
                });

            modelBuilder.Entity("TPharmacy.Shared.Domain.Staff", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateUpdated")
                        .HasColumnType("datetime2");

                    b.Property<string>("StafEmail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StafName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("StafPassword")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("StafRole")
                        .HasColumnType("int");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("Staffs");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            CreatedBy = "June",
                            DateCreated = new DateTime(2023, 2, 10, 22, 19, 4, 831, DateTimeKind.Local).AddTicks(5178),
                            DateUpdated = new DateTime(2023, 2, 10, 22, 19, 4, 831, DateTimeKind.Local).AddTicks(5202),
                            StafEmail = "june@gmail.com",
                            StafName = "June",
                            StafPassword = "June1234*",
                            StafRole = 0,
                            UpdatedBy = "System"
                        },
                        new
                        {
                            ID = 2,
                            CreatedBy = "June",
                            DateCreated = new DateTime(2023, 2, 10, 22, 19, 4, 831, DateTimeKind.Local).AddTicks(5208),
                            DateUpdated = new DateTime(2023, 2, 10, 22, 19, 4, 831, DateTimeKind.Local).AddTicks(5209),
                            StafEmail = "woon@gmail.com",
                            StafName = "Woon",
                            StafPassword = "June1234*",
                            StafRole = 1,
                            UpdatedBy = "System"
                        },
                        new
                        {
                            ID = 3,
                            CreatedBy = "June",
                            DateCreated = new DateTime(2023, 2, 10, 22, 19, 4, 831, DateTimeKind.Local).AddTicks(5211),
                            DateUpdated = new DateTime(2023, 2, 10, 22, 19, 4, 831, DateTimeKind.Local).AddTicks(5213),
                            StafEmail = "kate@gmail.com",
                            StafName = "Kate",
                            StafPassword = "June1234*",
                            StafRole = 2,
                            UpdatedBy = "System"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("TPharmacy.Server.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("TPharmacy.Server.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TPharmacy.Server.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("TPharmacy.Server.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TPharmacy.Shared.Domain.Consultation", b =>
                {
                    b.HasOne("TPharmacy.Shared.Domain.Customer", "Customer")
                        .WithMany("Consultations")
                        .HasForeignKey("CustomerID");

                    b.HasOne("TPharmacy.Shared.Domain.Staff", "Staff")
                        .WithMany("Consultations")
                        .HasForeignKey("StaffID");

                    b.Navigation("Customer");

                    b.Navigation("Staff");
                });

            modelBuilder.Entity("TPharmacy.Shared.Domain.Order", b =>
                {
                    b.HasOne("TPharmacy.Shared.Domain.Customer", "Customer")
                        .WithMany("Orders")
                        .HasForeignKey("CustomerID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TPharmacy.Shared.Domain.Staff", "Staff")
                        .WithMany("Orders")
                        .HasForeignKey("StaffID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Staff");
                });

            modelBuilder.Entity("TPharmacy.Shared.Domain.OrderItem", b =>
                {
                    b.HasOne("TPharmacy.Shared.Domain.Order", "Order")
                        .WithMany("OrderItems")
                        .HasForeignKey("OrderID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TPharmacy.Shared.Domain.Product", "Product")
                        .WithMany("OrderItems")
                        .HasForeignKey("ProductID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("TPharmacy.Shared.Domain.Payment", b =>
                {
                    b.HasOne("TPharmacy.Shared.Domain.Order", "Order")
                        .WithMany("Payments")
                        .HasForeignKey("OrderID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");
                });

            modelBuilder.Entity("TPharmacy.Shared.Domain.Prescription", b =>
                {
                    b.HasOne("TPharmacy.Shared.Domain.Consultation", "Consultation")
                        .WithMany("Prescriptions")
                        .HasForeignKey("ConsultationID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TPharmacy.Shared.Domain.Product", "Product")
                        .WithMany("Prescriptions")
                        .HasForeignKey("ProductID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Consultation");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("TPharmacy.Shared.Domain.Consultation", b =>
                {
                    b.Navigation("Prescriptions");
                });

            modelBuilder.Entity("TPharmacy.Shared.Domain.Customer", b =>
                {
                    b.Navigation("Consultations");

                    b.Navigation("Orders");
                });

            modelBuilder.Entity("TPharmacy.Shared.Domain.Order", b =>
                {
                    b.Navigation("OrderItems");

                    b.Navigation("Payments");
                });

            modelBuilder.Entity("TPharmacy.Shared.Domain.Product", b =>
                {
                    b.Navigation("OrderItems");

                    b.Navigation("Prescriptions");
                });

            modelBuilder.Entity("TPharmacy.Shared.Domain.Staff", b =>
                {
                    b.Navigation("Consultations");

                    b.Navigation("Orders");
                });
#pragma warning restore 612, 618
        }
    }
}
