// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TPharmacy.Server.Data;

namespace TPharmacy.Server.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20230118115314_intialdb")]
    partial class intialdb
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.17")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("IdentityServer4.EntityFramework.Entities.DeviceFlowCodes", b =>
                {
                    b.Property<string>("UserCode")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("ClientId")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Data")
                        .IsRequired()
                        .HasMaxLength(50000)
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("DeviceCode")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("Expiration")
                        .IsRequired()
                        .HasColumnType("datetime2");

                    b.Property<string>("SessionId")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("SubjectId")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("UserCode");

                    b.HasIndex("DeviceCode")
                        .IsUnique();

                    b.HasIndex("Expiration");

                    b.ToTable("DeviceCodes");
                });

            modelBuilder.Entity("IdentityServer4.EntityFramework.Entities.PersistedGrant", b =>
                {
                    b.Property<string>("Key")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("ClientId")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("ConsumedTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Data")
                        .IsRequired()
                        .HasMaxLength(50000)
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("Expiration")
                        .HasColumnType("datetime2");

                    b.Property<string>("SessionId")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("SubjectId")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Key");

                    b.HasIndex("Expiration");

                    b.HasIndex("SubjectId", "ClientId", "Type");

                    b.HasIndex("SubjectId", "SessionId", "Type");

                    b.ToTable("PersistedGrants");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");

                    b.HasData(
                        new
                        {
                            Id = "staff",
                            ConcurrencyStamp = "7783a0de-e3ce-4988-bf7f-fd6ca44c63ba",
                            Name = "Staff",
                            NormalizedName = "STAFF"
                        },
                        new
                        {
                            Id = "customer",
                            ConcurrencyStamp = "aaba996e-2180-46db-a617-69a361faf32b",
                            Name = "Customer",
                            NormalizedName = "CUSTOMER"
                        },
                        new
                        {
                            Id = "admin",
                            ConcurrencyStamp = "372029ef-f001-4fdf-a366-5b4e8675227f",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "pharmacist",
                            ConcurrencyStamp = "c480d5bb-cd49-4e64-ba11-650b9720bcea",
                            Name = "Pharmacist",
                            NormalizedName = "PHARMACIST"
                        },
                        new
                        {
                            Id = "packer",
                            ConcurrencyStamp = "21732e9e-a419-47ad-bbcd-be8fd16a4fe5",
                            Name = "Packer",
                            NormalizedName = "PACKER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");

                    b.HasData(
                        new
                        {
                            UserId = "3781efa7-66dc-47f0-860f-e506d04102s1",
                            RoleId = "staff"
                        },
                        new
                        {
                            UserId = "3781efa7-66dc-47f0-860f-e506d04102s1",
                            RoleId = "admin"
                        },
                        new
                        {
                            UserId = "3781efa7-66dc-47f0-860f-e506d04102s2",
                            RoleId = "staff"
                        },
                        new
                        {
                            UserId = "3781efa7-66dc-47f0-860f-e506d04102s2",
                            RoleId = "pharmacist"
                        },
                        new
                        {
                            UserId = "3781efa7-66dc-47f0-860f-e506d04102s3",
                            RoleId = "staff"
                        },
                        new
                        {
                            UserId = "3781efa7-66dc-47f0-860f-e506d04102s3",
                            RoleId = "packer"
                        },
                        new
                        {
                            UserId = "3781efa7-66dc-47f0-860f-e506d04102c1",
                            RoleId = "customer"
                        },
                        new
                        {
                            UserId = "3781efa7-66dc-47f0-860f-e506d04102c2",
                            RoleId = "customer"
                        },
                        new
                        {
                            UserId = "3781efa7-66dc-47f0-860f-e506d04102c3",
                            RoleId = "customer"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("TPharmacy.Server.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");

                    b.HasData(
                        new
                        {
                            Id = "3781efa7-66dc-47f0-860f-e506d04102s1",
                            AccessFailedCount = 0,
                            Address = "TPharmacy",
                            ConcurrencyStamp = "154cb6dd-6321-4c62-b678-f34776c0e5d3",
                            Email = "june@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "June",
                            LastName = "Staff",
                            LockoutEnabled = true,
                            NormalizedEmail = "JUNE@GMAIL.COM",
                            NormalizedUserName = "JUNE@GMAIL.COM",
                            Password = "June1234*",
                            PasswordHash = "AQAAAAEAACcQAAAAED7ydYgTyk8+g9VPL+o72rLZn9zfX3z/tK2cxaNV49+uLod1lt1JUKIh8OxK6c6BcQ==",
                            PhoneNumber = "9273 8983",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "7c09fd63-8795-40c5-bc7b-c4b6c6e7d290",
                            TwoFactorEnabled = false,
                            UserName = "june@gmail.com"
                        },
                        new
                        {
                            Id = "3781efa7-66dc-47f0-860f-e506d04102s2",
                            AccessFailedCount = 0,
                            Address = "TPharmacy",
                            ConcurrencyStamp = "3a083f86-a952-4ee6-bbcb-7459aac7bc5c",
                            Email = "woon@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Woon",
                            LastName = "Staff",
                            LockoutEnabled = true,
                            NormalizedEmail = "WOON@GMAIL.COM",
                            NormalizedUserName = "WOON@GMAIL.COM",
                            Password = "P@ssword1",
                            PasswordHash = "AQAAAAEAACcQAAAAEHpB12znv5ndYh8dZo69so6swiOd4khjgWd7jqaFY8gz6bQmLzyv47D0m88OH/op5w==",
                            PhoneNumber = "9287 2324",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "76091b2a-0845-4f32-87fb-2c22e004fcea",
                            TwoFactorEnabled = false,
                            UserName = "woon@gmail.com"
                        },
                        new
                        {
                            Id = "3781efa7-66dc-47f0-860f-e506d04102s3",
                            AccessFailedCount = 0,
                            Address = "TPharmacy",
                            ConcurrencyStamp = "82f1c9ba-a63e-497b-9a01-66bfb67cdead",
                            Email = "kate@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Kate",
                            LastName = "Staff",
                            LockoutEnabled = true,
                            NormalizedEmail = "KATE@GMAIL.COM",
                            NormalizedUserName = "KATE@GMAIL.COM",
                            Password = "Kate1234*",
                            PasswordHash = "AQAAAAEAACcQAAAAEBTXZxuMuOHleGF7JcdHSzSmgsCok3Q9OR4IgJ9oP0yInZzt0Taizm/P5vbD4RHavA==",
                            PhoneNumber = "6329 9823",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "5718a762-244e-4fd5-a6ce-42e2ca9e0401",
                            TwoFactorEnabled = false,
                            UserName = "kate@gmail.com"
                        },
                        new
                        {
                            Id = "3781efa7-66dc-47f0-860f-e506d04102c1",
                            AccessFailedCount = 0,
                            Address = "Tampines Ave 1",
                            ConcurrencyStamp = "54819653-d6ac-484d-ac96-85bb0e223823",
                            Email = "james@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "James",
                            LastName = "Customer",
                            LockoutEnabled = true,
                            NormalizedEmail = "JAMES@GMAIL.COM",
                            NormalizedUserName = "JAMES@GMAIL.COM",
                            Password = "James1234*",
                            PasswordHash = "AQAAAAEAACcQAAAAELbbuA3i7JK6ZICjp1wVJAwgLYqYN9v/ivIT5Yxo1tJ5kt6+kDi7l1tw544vOQUvEA==",
                            PhoneNumber = "8211 7319",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "3ce0d6d0-d88e-4d42-817b-75711af188be",
                            TwoFactorEnabled = false,
                            UserName = "james@gmail.com"
                        },
                        new
                        {
                            Id = "3781efa7-66dc-47f0-860f-e506d04102c2",
                            AccessFailedCount = 0,
                            Address = "Bedok Ave 1",
                            ConcurrencyStamp = "4f4c1350-09c1-4c95-aff2-5a7d38f37a2a",
                            Email = "alice@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Alice",
                            LastName = "Customer",
                            LockoutEnabled = true,
                            NormalizedEmail = "ALICE@GMAIL.COM",
                            NormalizedUserName = "ALICE@GMAIL.COM",
                            Password = "Alice1234*",
                            PasswordHash = "AQAAAAEAACcQAAAAENSYFOLzOGDQuu0MnzJPiT0LHPVa75dMKbtSpTI3Kqzg91uNo5gd6732rGPUve4Kxw==",
                            PhoneNumber = "8329 7433",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "917f801f-9bc2-41b7-a8eb-3e942610711f",
                            TwoFactorEnabled = false,
                            UserName = "alice@gmail.com"
                        },
                        new
                        {
                            Id = "3781efa7-66dc-47f0-860f-e506d04102c3",
                            AccessFailedCount = 0,
                            Address = "Jurong Ave 1",
                            ConcurrencyStamp = "7b6a9864-1771-4640-b5f8-c6b9f220bbfc",
                            Email = "sheila@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Sheila",
                            LastName = "Customer",
                            LockoutEnabled = true,
                            NormalizedEmail = "SHEILA@GMAIL.COM",
                            NormalizedUserName = "SHEILA@GMAIL.COM",
                            Password = "Sheila1234*",
                            PasswordHash = "AQAAAAEAACcQAAAAEC4IZkPTYXD1tLW55WiszS8yhwPdq1xspyr948vz9egUF+ADCY7B25naeLLdxHYDXw==",
                            PhoneNumber = "9436 7238",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "c355bc5f-ef62-4c65-89a3-eb012dd26ca5",
                            TwoFactorEnabled = false,
                            UserName = "sheila@gmail.com"
                        });
                });

            modelBuilder.Entity("TPharmacy.Shared.Domain.Consultation", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("ConDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ConDesc")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ConEndTime")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("ConFee")
                        .HasColumnType("decimal(7,2)");

                    b.Property<DateTime>("ConStartTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CusID")
                        .HasColumnType("int");

                    b.Property<int?>("CustomerID")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateUpdated")
                        .HasColumnType("datetime2");

                    b.Property<int>("StaffID")
                        .HasColumnType("int");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("CustomerID");

                    b.HasIndex("StaffID");

                    b.ToTable("Consultations");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            ConDate = new DateTime(2023, 1, 18, 19, 53, 14, 395, DateTimeKind.Local).AddTicks(3555),
                            ConDesc = "Flu Consultation",
                            ConEndTime = new DateTime(2023, 1, 18, 21, 2, 14, 395, DateTimeKind.Local).AddTicks(3815),
                            ConFee = 35.50m,
                            ConStartTime = new DateTime(2023, 1, 18, 19, 53, 14, 395, DateTimeKind.Local).AddTicks(3702),
                            CreatedBy = "Woon",
                            CusID = 1,
                            DateCreated = new DateTime(2023, 1, 18, 19, 53, 14, 395, DateTimeKind.Local).AddTicks(4439),
                            DateUpdated = new DateTime(2023, 1, 18, 19, 53, 14, 395, DateTimeKind.Local).AddTicks(4441),
                            StaffID = 1,
                            UpdatedBy = "System"
                        },
                        new
                        {
                            ID = 2,
                            ConDate = new DateTime(2023, 1, 18, 19, 53, 14, 395, DateTimeKind.Local).AddTicks(4444),
                            ConDesc = "Eczema Consultation",
                            ConEndTime = new DateTime(2023, 1, 18, 20, 53, 14, 395, DateTimeKind.Local).AddTicks(4447),
                            ConFee = 30.50m,
                            ConStartTime = new DateTime(2023, 1, 18, 19, 53, 14, 395, DateTimeKind.Local).AddTicks(4445),
                            CreatedBy = "Woon",
                            CusID = 3,
                            DateCreated = new DateTime(2023, 1, 18, 19, 53, 14, 395, DateTimeKind.Local).AddTicks(4451),
                            DateUpdated = new DateTime(2023, 1, 18, 19, 53, 14, 395, DateTimeKind.Local).AddTicks(4452),
                            StaffID = 1,
                            UpdatedBy = "System"
                        });
                });

            modelBuilder.Entity("TPharmacy.Shared.Domain.Customer", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CusAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CusEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CusName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CusNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CusPassword")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CusPoints")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateUpdated")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("Customers");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            CreatedBy = "System",
                            CusAddress = "Tampines Ave 1",
                            CusEmail = "james@gmail.com",
                            CusName = "James",
                            CusNumber = "87439653",
                            CusPassword = "James1234*",
                            CusPoints = 100,
                            DateCreated = new DateTime(2023, 1, 18, 19, 53, 14, 393, DateTimeKind.Local).AddTicks(7041),
                            DateUpdated = new DateTime(2023, 1, 18, 19, 53, 14, 393, DateTimeKind.Local).AddTicks(7046),
                            UpdatedBy = "System"
                        },
                        new
                        {
                            ID = 2,
                            CreatedBy = "System",
                            CusAddress = "Bedok Ave 1",
                            CusEmail = "alice@gmail.com",
                            CusName = "Alice",
                            CusNumber = "96512845",
                            CusPassword = "Alice1234*",
                            CusPoints = 50,
                            DateCreated = new DateTime(2023, 1, 18, 19, 53, 14, 393, DateTimeKind.Local).AddTicks(7050),
                            DateUpdated = new DateTime(2023, 1, 18, 19, 53, 14, 393, DateTimeKind.Local).AddTicks(7051),
                            UpdatedBy = "System"
                        },
                        new
                        {
                            ID = 3,
                            CreatedBy = "System",
                            CusAddress = "Jurong Ave 1",
                            CusEmail = "sheila@gmail.com",
                            CusName = "Sheila",
                            CusNumber = "87511773",
                            CusPassword = "Sheila1234*",
                            CusPoints = 89,
                            DateCreated = new DateTime(2023, 1, 18, 19, 53, 14, 393, DateTimeKind.Local).AddTicks(7054),
                            DateUpdated = new DateTime(2023, 1, 18, 19, 53, 14, 393, DateTimeKind.Local).AddTicks(7055),
                            UpdatedBy = "System"
                        });
                });

            modelBuilder.Entity("TPharmacy.Shared.Domain.Order", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CusID")
                        .HasColumnType("int");

                    b.Property<int?>("CustomerID")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateUpdated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("OrderDateTime")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("OrderFee")
                        .HasColumnType("decimal(7,2)");

                    b.Property<decimal>("OrderTotal")
                        .HasColumnType("decimal(7,2)");

                    b.Property<int>("StaffID")
                        .HasColumnType("int");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("CustomerID");

                    b.HasIndex("StaffID");

                    b.ToTable("Orders");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            CreatedBy = "System",
                            CusID = 1,
                            DateCreated = new DateTime(2023, 1, 18, 19, 53, 14, 394, DateTimeKind.Local).AddTicks(952),
                            DateUpdated = new DateTime(2023, 1, 18, 19, 53, 14, 394, DateTimeKind.Local).AddTicks(953),
                            OrderDateTime = new DateTime(2023, 1, 18, 19, 53, 14, 394, DateTimeKind.Local).AddTicks(460),
                            OrderFee = 0.00m,
                            OrderTotal = 128.00m,
                            StaffID = 3,
                            UpdatedBy = "Kate"
                        },
                        new
                        {
                            ID = 2,
                            CreatedBy = "System",
                            CusID = 3,
                            DateCreated = new DateTime(2023, 1, 18, 19, 53, 14, 394, DateTimeKind.Local).AddTicks(1022),
                            DateUpdated = new DateTime(2023, 1, 18, 19, 53, 14, 394, DateTimeKind.Local).AddTicks(1023),
                            OrderDateTime = new DateTime(2023, 1, 18, 19, 53, 14, 394, DateTimeKind.Local).AddTicks(1020),
                            OrderFee = 10.00m,
                            OrderTotal = 100.00m,
                            StaffID = 3,
                            UpdatedBy = "Kate"
                        });
                });

            modelBuilder.Entity("TPharmacy.Shared.Domain.OrderItem", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateUpdated")
                        .HasColumnType("datetime2");

                    b.Property<int>("OrderID")
                        .HasColumnType("int");

                    b.Property<int>("OrderItemQtny")
                        .HasColumnType("int");

                    b.Property<decimal>("OrderItemTotal")
                        .HasColumnType("decimal(7,2)");

                    b.Property<int>("ProductID")
                        .HasColumnType("int");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("OrderID");

                    b.HasIndex("ProductID");

                    b.ToTable("OrderItems");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            CreatedBy = "System",
                            DateCreated = new DateTime(2023, 1, 18, 19, 53, 14, 394, DateTimeKind.Local).AddTicks(4931),
                            DateUpdated = new DateTime(2023, 1, 18, 19, 53, 14, 394, DateTimeKind.Local).AddTicks(4935),
                            OrderID = 1,
                            OrderItemQtny = 2,
                            OrderItemTotal = 0m,
                            ProductID = 1,
                            UpdatedBy = "Kate"
                        },
                        new
                        {
                            ID = 2,
                            CreatedBy = "System",
                            DateCreated = new DateTime(2023, 1, 18, 19, 53, 14, 394, DateTimeKind.Local).AddTicks(4939),
                            DateUpdated = new DateTime(2023, 1, 18, 19, 53, 14, 394, DateTimeKind.Local).AddTicks(4940),
                            OrderID = 1,
                            OrderItemQtny = 1,
                            OrderItemTotal = 0m,
                            ProductID = 2,
                            UpdatedBy = "Kate"
                        },
                        new
                        {
                            ID = 3,
                            CreatedBy = "System",
                            DateCreated = new DateTime(2023, 1, 18, 19, 53, 14, 394, DateTimeKind.Local).AddTicks(4943),
                            DateUpdated = new DateTime(2023, 1, 18, 19, 53, 14, 394, DateTimeKind.Local).AddTicks(4944),
                            OrderID = 2,
                            OrderItemQtny = 2,
                            OrderItemTotal = 0m,
                            ProductID = 3,
                            UpdatedBy = "Kate"
                        });
                });

            modelBuilder.Entity("TPharmacy.Shared.Domain.Payment", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateUpdated")
                        .HasColumnType("datetime2");

                    b.Property<int>("OrderID")
                        .HasColumnType("int");

                    b.Property<string>("PayCardInfo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("PayFee")
                        .HasColumnType("decimal(7,2)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("OrderID");

                    b.ToTable("Payments");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            CreatedBy = "System",
                            DateCreated = new DateTime(2023, 1, 18, 19, 53, 14, 394, DateTimeKind.Local).AddTicks(7802),
                            DateUpdated = new DateTime(2023, 1, 18, 19, 53, 14, 394, DateTimeKind.Local).AddTicks(7805),
                            OrderID = 1,
                            PayCardInfo = "7855-3798-2344-9853",
                            PayFee = 5.00m,
                            UpdatedBy = "System"
                        },
                        new
                        {
                            ID = 2,
                            CreatedBy = "System",
                            DateCreated = new DateTime(2023, 1, 18, 19, 53, 14, 394, DateTimeKind.Local).AddTicks(7809),
                            DateUpdated = new DateTime(2023, 1, 18, 19, 53, 14, 394, DateTimeKind.Local).AddTicks(7810),
                            OrderID = 2,
                            PayCardInfo = "3244-2355-3459-9767",
                            PayFee = 15.00m,
                            UpdatedBy = "System"
                        });
                });

            modelBuilder.Entity("TPharmacy.Shared.Domain.Prescription", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ConID")
                        .HasColumnType("int");

                    b.Property<int?>("ConsultationID")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateUpdated")
                        .HasColumnType("datetime2");

                    b.Property<int>("PresQty")
                        .HasColumnType("int");

                    b.Property<int>("ProductID")
                        .HasColumnType("int");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("ConsultationID");

                    b.HasIndex("ProductID");

                    b.ToTable("Prescriptions");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            ConID = 1,
                            CreatedBy = "System",
                            DateCreated = new DateTime(2023, 1, 18, 19, 53, 14, 395, DateTimeKind.Local).AddTicks(5),
                            DateUpdated = new DateTime(2023, 1, 18, 19, 53, 14, 395, DateTimeKind.Local).AddTicks(8),
                            PresQty = 1,
                            ProductID = 4,
                            UpdatedBy = "System"
                        },
                        new
                        {
                            ID = 2,
                            ConID = 2,
                            CreatedBy = "System",
                            DateCreated = new DateTime(2023, 1, 18, 19, 53, 14, 395, DateTimeKind.Local).AddTicks(13),
                            DateUpdated = new DateTime(2023, 1, 18, 19, 53, 14, 395, DateTimeKind.Local).AddTicks(14),
                            PresQty = 2,
                            ProductID = 4,
                            UpdatedBy = "System"
                        });
                });

            modelBuilder.Entity("TPharmacy.Shared.Domain.Product", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateUpdated")
                        .HasColumnType("datetime2");

                    b.Property<string>("ProdBrand")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProdCategory")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProdDesc")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProdName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("ProdPrice")
                        .HasColumnType("decimal(7,2)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            CreatedBy = "System",
                            DateCreated = new DateTime(2023, 1, 18, 19, 53, 14, 391, DateTimeKind.Local).AddTicks(2366),
                            DateUpdated = new DateTime(2023, 1, 18, 19, 53, 14, 391, DateTimeKind.Local).AddTicks(9816),
                            ProdBrand = "Blackmores",
                            ProdCategory = "Supplement",
                            ProdDesc = "BLACKMORES Bio Vitamin C 1000mg 120 Tablets",
                            ProdName = "Vitamin C",
                            ProdPrice = 35.00m,
                            UpdatedBy = "System"
                        },
                        new
                        {
                            ID = 2,
                            CreatedBy = "System",
                            DateCreated = new DateTime(2023, 1, 18, 19, 53, 14, 392, DateTimeKind.Local).AddTicks(395),
                            DateUpdated = new DateTime(2023, 1, 18, 19, 53, 14, 392, DateTimeKind.Local).AddTicks(398),
                            ProdBrand = "Swisse",
                            ProdCategory = "Supplement",
                            ProdDesc = "Swisse Omega 3 Fish Oil 1500mg 100 Tablets",
                            ProdName = "Omega 3 Fish Oil",
                            ProdPrice = 58.00m,
                            UpdatedBy = "System"
                        },
                        new
                        {
                            ID = 3,
                            CreatedBy = "System",
                            DateCreated = new DateTime(2023, 1, 18, 19, 53, 14, 392, DateTimeKind.Local).AddTicks(402),
                            DateUpdated = new DateTime(2023, 1, 18, 19, 53, 14, 392, DateTimeKind.Local).AddTicks(403),
                            ProdBrand = "Wastons",
                            ProdCategory = "Supplement",
                            ProdDesc = "Wastons Calcium 500mg 150 Tablets",
                            ProdName = "Calcium",
                            ProdPrice = 45.00m,
                            UpdatedBy = "System"
                        },
                        new
                        {
                            ID = 4,
                            CreatedBy = "System",
                            DateCreated = new DateTime(2023, 1, 18, 19, 53, 14, 392, DateTimeKind.Local).AddTicks(406),
                            DateUpdated = new DateTime(2023, 1, 18, 19, 53, 14, 392, DateTimeKind.Local).AddTicks(407),
                            ProdBrand = "Telfast",
                            ProdCategory = "Prescriptions",
                            ProdDesc = "Telfast Panadol 10mg",
                            ProdName = "Panadol",
                            ProdPrice = 20.00m,
                            UpdatedBy = "System"
                        },
                        new
                        {
                            ID = 5,
                            CreatedBy = "System",
                            DateCreated = new DateTime(2023, 1, 18, 19, 53, 14, 392, DateTimeKind.Local).AddTicks(409),
                            DateUpdated = new DateTime(2023, 1, 18, 19, 53, 14, 392, DateTimeKind.Local).AddTicks(410),
                            ProdBrand = "Cellucor",
                            ProdCategory = "Sports",
                            ProdDesc = "Cellucor Whey Protein Powder 5LBS",
                            ProdName = "Whey Protein Powder",
                            ProdPrice = 60.00m,
                            UpdatedBy = "System"
                        },
                        new
                        {
                            ID = 6,
                            CreatedBy = "System",
                            DateCreated = new DateTime(2023, 1, 18, 19, 53, 14, 392, DateTimeKind.Local).AddTicks(412),
                            DateUpdated = new DateTime(2023, 1, 18, 19, 53, 14, 392, DateTimeKind.Local).AddTicks(413),
                            ProdBrand = "Solaray",
                            ProdCategory = "Baby",
                            ProdDesc = "Solaray Kids Multi Vitamins & Minerals Gummies 120S",
                            ProdName = "Kids Multi Vitamins & Minerals Gummies",
                            ProdPrice = 30.00m,
                            UpdatedBy = "System"
                        });
                });

            modelBuilder.Entity("TPharmacy.Shared.Domain.Staff", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateUpdated")
                        .HasColumnType("datetime2");

                    b.Property<string>("StafEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StafName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StafPassword")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StafRole")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("Staffs");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            CreatedBy = "June",
                            DateCreated = new DateTime(2023, 1, 18, 19, 53, 14, 393, DateTimeKind.Local).AddTicks(3299),
                            DateUpdated = new DateTime(2023, 1, 18, 19, 53, 14, 393, DateTimeKind.Local).AddTicks(3310),
                            StafEmail = "june@gmail.com",
                            StafName = "June",
                            StafPassword = "June1234*",
                            StafRole = "Admin",
                            UpdatedBy = "System"
                        },
                        new
                        {
                            ID = 2,
                            CreatedBy = "June",
                            DateCreated = new DateTime(2023, 1, 18, 19, 53, 14, 393, DateTimeKind.Local).AddTicks(3314),
                            DateUpdated = new DateTime(2023, 1, 18, 19, 53, 14, 393, DateTimeKind.Local).AddTicks(3315),
                            StafEmail = "woon@gmail.com",
                            StafName = "Woon",
                            StafPassword = "Woon1234*",
                            StafRole = "Pharmacist",
                            UpdatedBy = "System"
                        },
                        new
                        {
                            ID = 3,
                            CreatedBy = "June",
                            DateCreated = new DateTime(2023, 1, 18, 19, 53, 14, 393, DateTimeKind.Local).AddTicks(3318),
                            DateUpdated = new DateTime(2023, 1, 18, 19, 53, 14, 393, DateTimeKind.Local).AddTicks(3319),
                            StafEmail = "kate@gmail.com",
                            StafName = "Kate",
                            StafPassword = "Kate1234*",
                            StafRole = "Packer",
                            UpdatedBy = "System"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("TPharmacy.Server.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("TPharmacy.Server.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TPharmacy.Server.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("TPharmacy.Server.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TPharmacy.Shared.Domain.Consultation", b =>
                {
                    b.HasOne("TPharmacy.Shared.Domain.Customer", "Customer")
                        .WithMany("Consultations")
                        .HasForeignKey("CustomerID");

                    b.HasOne("TPharmacy.Shared.Domain.Staff", "Staff")
                        .WithMany("Consultations")
                        .HasForeignKey("StaffID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Staff");
                });

            modelBuilder.Entity("TPharmacy.Shared.Domain.Order", b =>
                {
                    b.HasOne("TPharmacy.Shared.Domain.Customer", "Customer")
                        .WithMany("Orders")
                        .HasForeignKey("CustomerID");

                    b.HasOne("TPharmacy.Shared.Domain.Staff", "Staff")
                        .WithMany("Orders")
                        .HasForeignKey("StaffID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Staff");
                });

            modelBuilder.Entity("TPharmacy.Shared.Domain.OrderItem", b =>
                {
                    b.HasOne("TPharmacy.Shared.Domain.Order", "Order")
                        .WithMany("OrderItems")
                        .HasForeignKey("OrderID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TPharmacy.Shared.Domain.Product", "Product")
                        .WithMany("OrderItems")
                        .HasForeignKey("ProductID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("TPharmacy.Shared.Domain.Payment", b =>
                {
                    b.HasOne("TPharmacy.Shared.Domain.Order", "Order")
                        .WithMany("Payments")
                        .HasForeignKey("OrderID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");
                });

            modelBuilder.Entity("TPharmacy.Shared.Domain.Prescription", b =>
                {
                    b.HasOne("TPharmacy.Shared.Domain.Consultation", "Consultation")
                        .WithMany("Prescriptions")
                        .HasForeignKey("ConsultationID");

                    b.HasOne("TPharmacy.Shared.Domain.Product", "Product")
                        .WithMany("Prescriptions")
                        .HasForeignKey("ProductID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Consultation");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("TPharmacy.Shared.Domain.Consultation", b =>
                {
                    b.Navigation("Prescriptions");
                });

            modelBuilder.Entity("TPharmacy.Shared.Domain.Customer", b =>
                {
                    b.Navigation("Consultations");

                    b.Navigation("Orders");
                });

            modelBuilder.Entity("TPharmacy.Shared.Domain.Order", b =>
                {
                    b.Navigation("OrderItems");

                    b.Navigation("Payments");
                });

            modelBuilder.Entity("TPharmacy.Shared.Domain.Product", b =>
                {
                    b.Navigation("OrderItems");

                    b.Navigation("Prescriptions");
                });

            modelBuilder.Entity("TPharmacy.Shared.Domain.Staff", b =>
                {
                    b.Navigation("Consultations");

                    b.Navigation("Orders");
                });
#pragma warning restore 612, 618
        }
    }
}
