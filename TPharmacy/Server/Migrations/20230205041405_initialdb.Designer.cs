// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TPharmacy.Server.Data;

namespace TPharmacy.Server.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
<<<<<<<< HEAD:TPharmacy/Server/Migrations/20230205101354_NewApplicationDB.Designer.cs
    [Migration("20230205101354_NewApplicationDB")]
    partial class NewApplicationDB
========
    [Migration("20230205041405_initialdb")]
    partial class initialdb
>>>>>>>> 179d76a671254f2d571593a86fe79de1330e94f8:TPharmacy/Server/Migrations/20230205041405_initialdb.Designer.cs
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.17")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("IdentityServer4.EntityFramework.Entities.DeviceFlowCodes", b =>
                {
                    b.Property<string>("UserCode")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("ClientId")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Data")
                        .IsRequired()
                        .HasMaxLength(50000)
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("DeviceCode")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("Expiration")
                        .IsRequired()
                        .HasColumnType("datetime2");

                    b.Property<string>("SessionId")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("SubjectId")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("UserCode");

                    b.HasIndex("DeviceCode")
                        .IsUnique();

                    b.HasIndex("Expiration");

                    b.ToTable("DeviceCodes");
                });

            modelBuilder.Entity("IdentityServer4.EntityFramework.Entities.PersistedGrant", b =>
                {
                    b.Property<string>("Key")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("ClientId")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("ConsumedTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Data")
                        .IsRequired()
                        .HasMaxLength(50000)
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("Expiration")
                        .HasColumnType("datetime2");

                    b.Property<string>("SessionId")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("SubjectId")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Key");

                    b.HasIndex("Expiration");

                    b.HasIndex("SubjectId", "ClientId", "Type");

                    b.HasIndex("SubjectId", "SessionId", "Type");

                    b.ToTable("PersistedGrants");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");

                    b.HasData(
                        new
                        {
                            Id = "staff",
<<<<<<<< HEAD:TPharmacy/Server/Migrations/20230205101354_NewApplicationDB.Designer.cs
                            ConcurrencyStamp = "76da9e34-6f73-415e-bfe0-bae5bd995d5d",
========
                            ConcurrencyStamp = "48b287ee-0523-4854-87a1-47e99d36da57",
>>>>>>>> 179d76a671254f2d571593a86fe79de1330e94f8:TPharmacy/Server/Migrations/20230205041405_initialdb.Designer.cs
                            Name = "Staff",
                            NormalizedName = "STAFF"
                        },
                        new
                        {
                            Id = "customer",
<<<<<<<< HEAD:TPharmacy/Server/Migrations/20230205101354_NewApplicationDB.Designer.cs
                            ConcurrencyStamp = "d2212e7f-828f-49b9-91ad-c8414fe8aeb0",
========
                            ConcurrencyStamp = "0e19a6eb-570d-4f50-9891-17ea3138460c",
>>>>>>>> 179d76a671254f2d571593a86fe79de1330e94f8:TPharmacy/Server/Migrations/20230205041405_initialdb.Designer.cs
                            Name = "Customer",
                            NormalizedName = "CUSTOMER"
                        },
                        new
                        {
                            Id = "admin",
<<<<<<<< HEAD:TPharmacy/Server/Migrations/20230205101354_NewApplicationDB.Designer.cs
                            ConcurrencyStamp = "a368645a-3549-4678-ba5f-44fe18ac8d35",
========
                            ConcurrencyStamp = "254b1742-2eef-4361-bc7d-9cba63f12941",
>>>>>>>> 179d76a671254f2d571593a86fe79de1330e94f8:TPharmacy/Server/Migrations/20230205041405_initialdb.Designer.cs
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "pharmacist",
<<<<<<<< HEAD:TPharmacy/Server/Migrations/20230205101354_NewApplicationDB.Designer.cs
                            ConcurrencyStamp = "1ca9ba1b-cc1f-4caa-9558-7e11e7afb085",
========
                            ConcurrencyStamp = "0bcc5531-5f0c-406f-93b1-f7cd2775193e",
>>>>>>>> 179d76a671254f2d571593a86fe79de1330e94f8:TPharmacy/Server/Migrations/20230205041405_initialdb.Designer.cs
                            Name = "Pharmacist",
                            NormalizedName = "PHARMACIST"
                        },
                        new
                        {
                            Id = "packer",
<<<<<<<< HEAD:TPharmacy/Server/Migrations/20230205101354_NewApplicationDB.Designer.cs
                            ConcurrencyStamp = "9eee53fc-593f-47d8-9759-8a2eba9aa670",
========
                            ConcurrencyStamp = "a7ccca7a-de33-417c-b454-6e928da5ec02",
>>>>>>>> 179d76a671254f2d571593a86fe79de1330e94f8:TPharmacy/Server/Migrations/20230205041405_initialdb.Designer.cs
                            Name = "Packer",
                            NormalizedName = "PACKER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");

                    b.HasData(
                        new
                        {
                            UserId = "3781efa7-66dc-47f0-860f-e506d04102s1",
                            RoleId = "staff"
                        },
                        new
                        {
                            UserId = "3781efa7-66dc-47f0-860f-e506d04102s1",
                            RoleId = "admin"
                        },
                        new
                        {
                            UserId = "3781efa7-66dc-47f0-860f-e506d04102s2",
                            RoleId = "staff"
                        },
                        new
                        {
                            UserId = "3781efa7-66dc-47f0-860f-e506d04102s2",
                            RoleId = "pharmacist"
                        },
                        new
                        {
                            UserId = "3781efa7-66dc-47f0-860f-e506d04102s3",
                            RoleId = "staff"
                        },
                        new
                        {
                            UserId = "3781efa7-66dc-47f0-860f-e506d04102s3",
                            RoleId = "packer"
                        },
                        new
                        {
                            UserId = "3781efa7-66dc-47f0-860f-e506d04102c1",
                            RoleId = "customer"
                        },
                        new
                        {
                            UserId = "3781efa7-66dc-47f0-860f-e506d04102c2",
                            RoleId = "customer"
                        },
                        new
                        {
                            UserId = "3781efa7-66dc-47f0-860f-e506d04102c3",
                            RoleId = "customer"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("TPharmacy.Server.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("Role")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");

                    b.HasData(
                        new
                        {
                            Id = "3781efa7-66dc-47f0-860f-e506d04102s1",
                            AccessFailedCount = 0,
                            Address = "TPharmacy",
<<<<<<<< HEAD:TPharmacy/Server/Migrations/20230205101354_NewApplicationDB.Designer.cs
                            ConcurrencyStamp = "bb173a29-b73b-4f69-81c9-ee24fb09efbe",
========
                            ConcurrencyStamp = "e30a515d-1997-419d-9dec-54ed3a7576b9",
>>>>>>>> 179d76a671254f2d571593a86fe79de1330e94f8:TPharmacy/Server/Migrations/20230205041405_initialdb.Designer.cs
                            Email = "june@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = true,
                            Name = "June",
                            NormalizedEmail = "JUNE@GMAIL.COM",
                            NormalizedUserName = "JUNE@GMAIL.COM",
                            Password = "June1234*",
<<<<<<<< HEAD:TPharmacy/Server/Migrations/20230205101354_NewApplicationDB.Designer.cs
                            PasswordHash = "AQAAAAEAACcQAAAAEKqn/DjCETmr6GTt5ckKiUfJQWiqSVOT/04U1D4NIbOdnosQwMrnGGY2jXxGeZSJBw==",
                            PhoneNumber = "9273 8983",
                            PhoneNumberConfirmed = true,
                            Role = "Staff",
                            SecurityStamp = "96fba08f-6249-47c6-88bf-c4f5a37dd4af",
========
                            PasswordHash = "AQAAAAEAACcQAAAAELLuok0Y2uAqMIMw+VBBcN9AGqk8EuBqVyOiq56iXRkBNyMV4Yf5W605/f7HBlA9JQ==",
                            PhoneNumber = "9273 8983",
                            PhoneNumberConfirmed = true,
                            Role = "Staff",
                            SecurityStamp = "74c84118-5701-47a0-ad9a-60494d0b97e7",
>>>>>>>> 179d76a671254f2d571593a86fe79de1330e94f8:TPharmacy/Server/Migrations/20230205041405_initialdb.Designer.cs
                            TwoFactorEnabled = false,
                            UserName = "june@gmail.com"
                        },
                        new
                        {
                            Id = "3781efa7-66dc-47f0-860f-e506d04102s2",
                            AccessFailedCount = 0,
                            Address = "TPharmacy",
<<<<<<<< HEAD:TPharmacy/Server/Migrations/20230205101354_NewApplicationDB.Designer.cs
                            ConcurrencyStamp = "c9390497-aec2-4715-b9d7-238e78f9b938",
========
                            ConcurrencyStamp = "0689d15e-5300-405e-9204-24124fe898fb",
>>>>>>>> 179d76a671254f2d571593a86fe79de1330e94f8:TPharmacy/Server/Migrations/20230205041405_initialdb.Designer.cs
                            Email = "woon@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = true,
                            Name = "Woon",
                            NormalizedEmail = "WOON@GMAIL.COM",
                            NormalizedUserName = "WOON@GMAIL.COM",
                            Password = "June1234*",
<<<<<<<< HEAD:TPharmacy/Server/Migrations/20230205101354_NewApplicationDB.Designer.cs
                            PasswordHash = "AQAAAAEAACcQAAAAECGIPHj5+QBrsa8zzOEDLVChLAWvsxs/ZVc17EE14pNAhQGUEIu0RUFUf1le8H1kuQ==",
                            PhoneNumber = "9287 2324",
                            PhoneNumberConfirmed = true,
                            Role = "Staff",
                            SecurityStamp = "da2b343a-11ca-471a-8187-8f07fcd1c738",
========
                            PasswordHash = "AQAAAAEAACcQAAAAEEe+KfVQGhO2TVvmgi2DG9sW25qeto3FjCzQGgPhY89okWLYZhQ9Zu6H2MyAFionMg==",
                            PhoneNumber = "9287 2324",
                            PhoneNumberConfirmed = true,
                            Role = "Staff",
                            SecurityStamp = "88993821-0bdd-4d49-a20a-e776971fc609",
>>>>>>>> 179d76a671254f2d571593a86fe79de1330e94f8:TPharmacy/Server/Migrations/20230205041405_initialdb.Designer.cs
                            TwoFactorEnabled = false,
                            UserName = "woon@gmail.com"
                        },
                        new
                        {
                            Id = "3781efa7-66dc-47f0-860f-e506d04102s3",
                            AccessFailedCount = 0,
                            Address = "TPharmacy",
<<<<<<<< HEAD:TPharmacy/Server/Migrations/20230205101354_NewApplicationDB.Designer.cs
                            ConcurrencyStamp = "68430603-7546-4d3e-93d0-ed1a685258c0",
========
                            ConcurrencyStamp = "514fc9ff-81f5-4945-8216-716f32022234",
>>>>>>>> 179d76a671254f2d571593a86fe79de1330e94f8:TPharmacy/Server/Migrations/20230205041405_initialdb.Designer.cs
                            Email = "kate@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = true,
                            Name = "Kate",
                            NormalizedEmail = "KATE@GMAIL.COM",
                            NormalizedUserName = "KATE@GMAIL.COM",
                            Password = "June1234*",
<<<<<<<< HEAD:TPharmacy/Server/Migrations/20230205101354_NewApplicationDB.Designer.cs
                            PasswordHash = "AQAAAAEAACcQAAAAEBUZTaPZotPlpnVrdBM6woN1+B2+V6aFtQYSQBps1DN1hhyaCnvAzNR5PHm/84pN6g==",
                            PhoneNumber = "6329 9823",
                            PhoneNumberConfirmed = true,
                            Role = "Staff",
                            SecurityStamp = "0be62187-90b0-43e5-96d2-b0bbc1f7f625",
========
                            PasswordHash = "AQAAAAEAACcQAAAAELNUCs4aqoLjvxUrktGDN8brdIX/IoKeZcztZN3WcHuORAs4Vo/t7+o+IClsEHNdfg==",
                            PhoneNumber = "6329 9823",
                            PhoneNumberConfirmed = true,
                            Role = "Staff",
                            SecurityStamp = "636f7fbd-5f89-4d16-9167-7d0da10bca3c",
>>>>>>>> 179d76a671254f2d571593a86fe79de1330e94f8:TPharmacy/Server/Migrations/20230205041405_initialdb.Designer.cs
                            TwoFactorEnabled = false,
                            UserName = "kate@gmail.com"
                        },
                        new
                        {
                            Id = "3781efa7-66dc-47f0-860f-e506d04102c1",
                            AccessFailedCount = 0,
                            Address = "Tampines Ave 1",
<<<<<<<< HEAD:TPharmacy/Server/Migrations/20230205101354_NewApplicationDB.Designer.cs
                            ConcurrencyStamp = "0cccf2cd-0fbf-4ae3-8030-67a59307e27e",
========
                            ConcurrencyStamp = "19a546ad-b24b-497b-8c19-1dae218444fa",
>>>>>>>> 179d76a671254f2d571593a86fe79de1330e94f8:TPharmacy/Server/Migrations/20230205041405_initialdb.Designer.cs
                            Email = "james@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = true,
                            Name = "James",
                            NormalizedEmail = "JAMES@GMAIL.COM",
                            NormalizedUserName = "JAMES@GMAIL.COM",
                            Password = "June1234*",
<<<<<<<< HEAD:TPharmacy/Server/Migrations/20230205101354_NewApplicationDB.Designer.cs
                            PasswordHash = "AQAAAAEAACcQAAAAEPyehag3ngd1rwAOnilZMZHq37avi363nmOetsKlmNVzxk/CpblWHVCXF/VbVU8AVQ==",
                            PhoneNumber = "8211 7319",
                            PhoneNumberConfirmed = true,
                            Role = "Customer",
                            SecurityStamp = "97488626-44d9-46c8-a346-02db0912c2dc",
========
                            PasswordHash = "AQAAAAEAACcQAAAAEL3kLooR15QgldxKBqp6QL/rOLxHX7XrBOY70bO2mGN0bdrBVLU1wrJF0QNf/XsIGQ==",
                            PhoneNumber = "8211 7319",
                            PhoneNumberConfirmed = true,
                            Role = "Customer",
                            SecurityStamp = "c8257816-1663-47d9-a1aa-ba761bf351dc",
>>>>>>>> 179d76a671254f2d571593a86fe79de1330e94f8:TPharmacy/Server/Migrations/20230205041405_initialdb.Designer.cs
                            TwoFactorEnabled = false,
                            UserName = "james@gmail.com"
                        },
                        new
                        {
                            Id = "3781efa7-66dc-47f0-860f-e506d04102c2",
                            AccessFailedCount = 0,
                            Address = "Bedok Ave 1",
<<<<<<<< HEAD:TPharmacy/Server/Migrations/20230205101354_NewApplicationDB.Designer.cs
                            ConcurrencyStamp = "8afe145c-d3b8-4199-aab4-5e05304e1f53",
========
                            ConcurrencyStamp = "5e70ada4-65d4-4896-825c-d008e1121d51",
>>>>>>>> 179d76a671254f2d571593a86fe79de1330e94f8:TPharmacy/Server/Migrations/20230205041405_initialdb.Designer.cs
                            Email = "alice@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = true,
                            Name = "Alice",
                            NormalizedEmail = "ALICE@GMAIL.COM",
                            NormalizedUserName = "ALICE@GMAIL.COM",
                            Password = "June1234*",
<<<<<<<< HEAD:TPharmacy/Server/Migrations/20230205101354_NewApplicationDB.Designer.cs
                            PasswordHash = "AQAAAAEAACcQAAAAEMPWLGHniouGERNhCkKbWtGtrxtKKkv3hBAiQniao/IPQcDTgqSRagPg9H+iVrOMxw==",
                            PhoneNumber = "8329 7433",
                            PhoneNumberConfirmed = true,
                            Role = "Customer",
                            SecurityStamp = "cde8d887-bff9-4a0f-931d-aa78f6acffdd",
========
                            PasswordHash = "AQAAAAEAACcQAAAAEJhH8n+zI+2BzGdZZbalCe7TTCvUAopPsh2InmJzBaymqeYQz4jJWgp1/gNovBrv6Q==",
                            PhoneNumber = "8329 7433",
                            PhoneNumberConfirmed = true,
                            Role = "Customer",
                            SecurityStamp = "afac3943-9dfa-43d2-815e-4db44edf162b",
>>>>>>>> 179d76a671254f2d571593a86fe79de1330e94f8:TPharmacy/Server/Migrations/20230205041405_initialdb.Designer.cs
                            TwoFactorEnabled = false,
                            UserName = "alice@gmail.com"
                        },
                        new
                        {
                            Id = "3781efa7-66dc-47f0-860f-e506d04102c3",
                            AccessFailedCount = 0,
                            Address = "Jurong Ave 1",
<<<<<<<< HEAD:TPharmacy/Server/Migrations/20230205101354_NewApplicationDB.Designer.cs
                            ConcurrencyStamp = "e2b29ada-7b16-437c-80e2-d2b858ff9be1",
========
                            ConcurrencyStamp = "d96790aa-5b2c-44cf-954d-635957a83f6e",
>>>>>>>> 179d76a671254f2d571593a86fe79de1330e94f8:TPharmacy/Server/Migrations/20230205041405_initialdb.Designer.cs
                            Email = "sheila@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = true,
                            Name = "Sheila",
                            NormalizedEmail = "SHEILA@GMAIL.COM",
                            NormalizedUserName = "SHEILA@GMAIL.COM",
                            Password = "June1234*",
<<<<<<<< HEAD:TPharmacy/Server/Migrations/20230205101354_NewApplicationDB.Designer.cs
                            PasswordHash = "AQAAAAEAACcQAAAAEFRpYbbCGL1vLukJGYm8HP73wfPEBjHxa8Io4MK+i65SsMkAB6lMkcoDYgJy0rzQ5Q==",
                            PhoneNumber = "9436 7238",
                            PhoneNumberConfirmed = true,
                            Role = "Customer",
                            SecurityStamp = "0dba80ba-4dfd-40b7-b53c-82879f05aad1",
========
                            PasswordHash = "AQAAAAEAACcQAAAAEDAt7f1m5HcGKa+UAyzB5lanY58UQErhzy7q2s/HpPTyuFaCN6QUyXGly2dlqYSgkw==",
                            PhoneNumber = "9436 7238",
                            PhoneNumberConfirmed = true,
                            Role = "Customer",
                            SecurityStamp = "0834c0e9-1d5f-4711-a792-5bf91d3d15a5",
>>>>>>>> 179d76a671254f2d571593a86fe79de1330e94f8:TPharmacy/Server/Migrations/20230205041405_initialdb.Designer.cs
                            TwoFactorEnabled = false,
                            UserName = "sheila@gmail.com"
                        });
                });

            modelBuilder.Entity("TPharmacy.Shared.Domain.Consultation", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("ConDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ConDesc")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("ConDuration")
                        .HasColumnType("int");

                    b.Property<decimal>("ConFee")
                        .HasColumnType("decimal(7,2)");

                    b.Property<string>("ConStatus")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CustomerID")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateUpdated")
                        .HasColumnType("datetime2");

                    b.Property<int?>("StaffID")
                        .HasColumnType("int");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("CustomerID");

                    b.HasIndex("StaffID");

                    b.ToTable("Consultations");

                    b.HasData(
                        new
                        {
                            ID = 1,
<<<<<<<< HEAD:TPharmacy/Server/Migrations/20230205101354_NewApplicationDB.Designer.cs
                            ConDate = new DateTime(2023, 2, 5, 18, 13, 53, 928, DateTimeKind.Local).AddTicks(3467),
========
                            ConDate = new DateTime(2023, 2, 5, 12, 14, 4, 784, DateTimeKind.Local).AddTicks(8826),
>>>>>>>> 179d76a671254f2d571593a86fe79de1330e94f8:TPharmacy/Server/Migrations/20230205041405_initialdb.Designer.cs
                            ConDesc = "Flu Consultation",
                            ConDuration = 60,
                            ConFee = 35.50m,
                            ConStatus = "Completed",
                            CreatedBy = "Woon",
                            CustomerID = 1,
<<<<<<<< HEAD:TPharmacy/Server/Migrations/20230205101354_NewApplicationDB.Designer.cs
                            DateCreated = new DateTime(2023, 2, 5, 18, 13, 53, 928, DateTimeKind.Local).AddTicks(4225),
                            DateUpdated = new DateTime(2023, 2, 5, 18, 13, 53, 928, DateTimeKind.Local).AddTicks(4229),
========
                            DateCreated = new DateTime(2023, 2, 5, 12, 14, 4, 784, DateTimeKind.Local).AddTicks(9359),
                            DateUpdated = new DateTime(2023, 2, 5, 12, 14, 4, 784, DateTimeKind.Local).AddTicks(9361),
>>>>>>>> 179d76a671254f2d571593a86fe79de1330e94f8:TPharmacy/Server/Migrations/20230205041405_initialdb.Designer.cs
                            StaffID = 2,
                            UpdatedBy = "System"
                        },
                        new
                        {
                            ID = 2,
<<<<<<<< HEAD:TPharmacy/Server/Migrations/20230205101354_NewApplicationDB.Designer.cs
                            ConDate = new DateTime(2023, 2, 5, 18, 13, 53, 928, DateTimeKind.Local).AddTicks(4232),
========
                            ConDate = new DateTime(2023, 2, 5, 12, 14, 4, 784, DateTimeKind.Local).AddTicks(9364),
>>>>>>>> 179d76a671254f2d571593a86fe79de1330e94f8:TPharmacy/Server/Migrations/20230205041405_initialdb.Designer.cs
                            ConDesc = "Eczema Consultation",
                            ConDuration = 45,
                            ConFee = 30.50m,
                            ConStatus = "Pending",
                            CreatedBy = "Woon",
                            CustomerID = 3,
<<<<<<<< HEAD:TPharmacy/Server/Migrations/20230205101354_NewApplicationDB.Designer.cs
                            DateCreated = new DateTime(2023, 2, 5, 18, 13, 53, 928, DateTimeKind.Local).AddTicks(4234),
                            DateUpdated = new DateTime(2023, 2, 5, 18, 13, 53, 928, DateTimeKind.Local).AddTicks(4235),
========
                            DateCreated = new DateTime(2023, 2, 5, 12, 14, 4, 784, DateTimeKind.Local).AddTicks(9365),
                            DateUpdated = new DateTime(2023, 2, 5, 12, 14, 4, 784, DateTimeKind.Local).AddTicks(9366),
>>>>>>>> 179d76a671254f2d571593a86fe79de1330e94f8:TPharmacy/Server/Migrations/20230205041405_initialdb.Designer.cs
                            StaffID = 2,
                            UpdatedBy = "System"
                        });
                });

            modelBuilder.Entity("TPharmacy.Shared.Domain.Customer", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CusAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CusEmail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CusName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("CusNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CusPassword")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateUpdated")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("Customers");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            CreatedBy = "System",
                            CusAddress = "Tampines Ave 1",
                            CusEmail = "james@gmail.com",
                            CusName = "James",
                            CusNumber = "87439653",
                            CusPassword = "June1234*",
<<<<<<<< HEAD:TPharmacy/Server/Migrations/20230205101354_NewApplicationDB.Designer.cs
                            DateCreated = new DateTime(2023, 2, 5, 18, 13, 53, 927, DateTimeKind.Local).AddTicks(7237),
                            DateUpdated = new DateTime(2023, 2, 5, 18, 13, 53, 927, DateTimeKind.Local).AddTicks(7243),
========
                            DateCreated = new DateTime(2023, 2, 5, 12, 14, 4, 784, DateTimeKind.Local).AddTicks(4239),
                            DateUpdated = new DateTime(2023, 2, 5, 12, 14, 4, 784, DateTimeKind.Local).AddTicks(4242),
>>>>>>>> 179d76a671254f2d571593a86fe79de1330e94f8:TPharmacy/Server/Migrations/20230205041405_initialdb.Designer.cs
                            UpdatedBy = "System"
                        },
                        new
                        {
                            ID = 2,
                            CreatedBy = "System",
                            CusAddress = "Bedok Ave 1",
                            CusEmail = "alice@gmail.com",
                            CusName = "Alice",
                            CusNumber = "96512845",
                            CusPassword = "June1234*",
<<<<<<<< HEAD:TPharmacy/Server/Migrations/20230205101354_NewApplicationDB.Designer.cs
                            DateCreated = new DateTime(2023, 2, 5, 18, 13, 53, 927, DateTimeKind.Local).AddTicks(7246),
                            DateUpdated = new DateTime(2023, 2, 5, 18, 13, 53, 927, DateTimeKind.Local).AddTicks(7247),
========
                            DateCreated = new DateTime(2023, 2, 5, 12, 14, 4, 784, DateTimeKind.Local).AddTicks(4246),
                            DateUpdated = new DateTime(2023, 2, 5, 12, 14, 4, 784, DateTimeKind.Local).AddTicks(4247),
>>>>>>>> 179d76a671254f2d571593a86fe79de1330e94f8:TPharmacy/Server/Migrations/20230205041405_initialdb.Designer.cs
                            UpdatedBy = "System"
                        },
                        new
                        {
                            ID = 3,
                            CreatedBy = "System",
                            CusAddress = "Jurong Ave 1",
                            CusEmail = "sheila@gmail.com",
                            CusName = "Sheila",
                            CusNumber = "87511773",
                            CusPassword = "June1234*",
<<<<<<<< HEAD:TPharmacy/Server/Migrations/20230205101354_NewApplicationDB.Designer.cs
                            DateCreated = new DateTime(2023, 2, 5, 18, 13, 53, 927, DateTimeKind.Local).AddTicks(7249),
                            DateUpdated = new DateTime(2023, 2, 5, 18, 13, 53, 927, DateTimeKind.Local).AddTicks(7250),
========
                            DateCreated = new DateTime(2023, 2, 5, 12, 14, 4, 784, DateTimeKind.Local).AddTicks(4248),
                            DateUpdated = new DateTime(2023, 2, 5, 12, 14, 4, 784, DateTimeKind.Local).AddTicks(4249),
>>>>>>>> 179d76a671254f2d571593a86fe79de1330e94f8:TPharmacy/Server/Migrations/20230205041405_initialdb.Designer.cs
                            UpdatedBy = "System"
                        });
                });

            modelBuilder.Entity("TPharmacy.Shared.Domain.Order", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CustomerID")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateUpdated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("OrderDateTime")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("OrderFee")
                        .HasColumnType("decimal(7,2)");

                    b.Property<decimal>("OrderItemTotal")
                        .HasColumnType("decimal(7,2)");

                    b.Property<int>("OrderStatus")
                        .HasColumnType("int");

                    b.Property<decimal>("OrderTotal")
                        .HasColumnType("decimal(7,2)");

                    b.Property<int>("StaffID")
                        .HasColumnType("int");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("CustomerID");

                    b.HasIndex("StaffID");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("TPharmacy.Shared.Domain.OrderItem", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateUpdated")
                        .HasColumnType("datetime2");

                    b.Property<int>("OrderID")
                        .HasColumnType("int");

                    b.Property<int>("OrderItemQtny")
                        .HasColumnType("int");

                    b.Property<decimal>("OrderItemTotal")
                        .HasColumnType("decimal(7,2)");

                    b.Property<int>("ProductID")
                        .HasColumnType("int");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("OrderID");

                    b.HasIndex("ProductID");

                    b.ToTable("OrderItems");
                });

            modelBuilder.Entity("TPharmacy.Shared.Domain.Payment", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateUpdated")
                        .HasColumnType("datetime2");

                    b.Property<int>("OrderID")
                        .HasColumnType("int");

                    b.Property<string>("PayCardInfo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("PayFee")
                        .HasColumnType("decimal(7,2)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("OrderID");

                    b.ToTable("Payments");
                });

            modelBuilder.Entity("TPharmacy.Shared.Domain.Prescription", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ConsultationID")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateUpdated")
                        .HasColumnType("datetime2");

                    b.Property<int>("PresQty")
                        .HasColumnType("int");

                    b.Property<int>("ProductID")
                        .HasColumnType("int");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("ConsultationID");

                    b.HasIndex("ProductID");

                    b.ToTable("Prescriptions");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            ConsultationID = 1,
                            CreatedBy = "System",
<<<<<<<< HEAD:TPharmacy/Server/Migrations/20230205101354_NewApplicationDB.Designer.cs
                            DateCreated = new DateTime(2023, 2, 5, 18, 13, 53, 927, DateTimeKind.Local).AddTicks(9768),
                            DateUpdated = new DateTime(2023, 2, 5, 18, 13, 53, 927, DateTimeKind.Local).AddTicks(9773),
========
                            DateCreated = new DateTime(2023, 2, 5, 12, 14, 4, 784, DateTimeKind.Local).AddTicks(6041),
                            DateUpdated = new DateTime(2023, 2, 5, 12, 14, 4, 784, DateTimeKind.Local).AddTicks(6043),
>>>>>>>> 179d76a671254f2d571593a86fe79de1330e94f8:TPharmacy/Server/Migrations/20230205041405_initialdb.Designer.cs
                            PresQty = 1,
                            ProductID = 4,
                            UpdatedBy = "System"
                        },
                        new
                        {
                            ID = 2,
                            ConsultationID = 2,
                            CreatedBy = "System",
<<<<<<<< HEAD:TPharmacy/Server/Migrations/20230205101354_NewApplicationDB.Designer.cs
                            DateCreated = new DateTime(2023, 2, 5, 18, 13, 53, 927, DateTimeKind.Local).AddTicks(9775),
                            DateUpdated = new DateTime(2023, 2, 5, 18, 13, 53, 927, DateTimeKind.Local).AddTicks(9776),
========
                            DateCreated = new DateTime(2023, 2, 5, 12, 14, 4, 784, DateTimeKind.Local).AddTicks(6047),
                            DateUpdated = new DateTime(2023, 2, 5, 12, 14, 4, 784, DateTimeKind.Local).AddTicks(6048),
>>>>>>>> 179d76a671254f2d571593a86fe79de1330e94f8:TPharmacy/Server/Migrations/20230205041405_initialdb.Designer.cs
                            PresQty = 2,
                            ProductID = 4,
                            UpdatedBy = "System"
                        });
                });

            modelBuilder.Entity("TPharmacy.Shared.Domain.Product", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateUpdated")
                        .HasColumnType("datetime2");

                    b.Property<string>("ProdBrand")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProdCategory")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProdDesc")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ProdName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<decimal>("ProdPrice")
                        .HasColumnType("decimal(7,2)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            CreatedBy = "System",
<<<<<<<< HEAD:TPharmacy/Server/Migrations/20230205101354_NewApplicationDB.Designer.cs
                            DateCreated = new DateTime(2023, 2, 5, 18, 13, 53, 925, DateTimeKind.Local).AddTicks(3675),
                            DateUpdated = new DateTime(2023, 2, 5, 18, 13, 53, 926, DateTimeKind.Local).AddTicks(1658),
========
                            DateCreated = new DateTime(2023, 2, 5, 12, 14, 4, 782, DateTimeKind.Local).AddTicks(5575),
                            DateUpdated = new DateTime(2023, 2, 5, 12, 14, 4, 783, DateTimeKind.Local).AddTicks(1442),
>>>>>>>> 179d76a671254f2d571593a86fe79de1330e94f8:TPharmacy/Server/Migrations/20230205041405_initialdb.Designer.cs
                            ProdBrand = "Blackmores",
                            ProdCategory = "Supplement",
                            ProdDesc = "BLACKMORES Bio Vitamin C 1000mg 120 Tablets",
                            ProdName = "Vitamin C",
                            ProdPrice = 35.00m,
                            UpdatedBy = "System"
                        },
                        new
                        {
                            ID = 2,
                            CreatedBy = "System",
<<<<<<<< HEAD:TPharmacy/Server/Migrations/20230205101354_NewApplicationDB.Designer.cs
                            DateCreated = new DateTime(2023, 2, 5, 18, 13, 53, 926, DateTimeKind.Local).AddTicks(2186),
                            DateUpdated = new DateTime(2023, 2, 5, 18, 13, 53, 926, DateTimeKind.Local).AddTicks(2189),
========
                            DateCreated = new DateTime(2023, 2, 5, 12, 14, 4, 783, DateTimeKind.Local).AddTicks(1864),
                            DateUpdated = new DateTime(2023, 2, 5, 12, 14, 4, 783, DateTimeKind.Local).AddTicks(1867),
>>>>>>>> 179d76a671254f2d571593a86fe79de1330e94f8:TPharmacy/Server/Migrations/20230205041405_initialdb.Designer.cs
                            ProdBrand = "Swisse",
                            ProdCategory = "Supplement",
                            ProdDesc = "Swisse Omega 3 Fish Oil 1500mg 100 Tablets",
                            ProdName = "Omega 3 Fish Oil",
                            ProdPrice = 58.00m,
                            UpdatedBy = "System"
                        },
                        new
                        {
                            ID = 3,
                            CreatedBy = "System",
<<<<<<<< HEAD:TPharmacy/Server/Migrations/20230205101354_NewApplicationDB.Designer.cs
                            DateCreated = new DateTime(2023, 2, 5, 18, 13, 53, 926, DateTimeKind.Local).AddTicks(2191),
                            DateUpdated = new DateTime(2023, 2, 5, 18, 13, 53, 926, DateTimeKind.Local).AddTicks(2192),
========
                            DateCreated = new DateTime(2023, 2, 5, 12, 14, 4, 783, DateTimeKind.Local).AddTicks(1869),
                            DateUpdated = new DateTime(2023, 2, 5, 12, 14, 4, 783, DateTimeKind.Local).AddTicks(1870),
>>>>>>>> 179d76a671254f2d571593a86fe79de1330e94f8:TPharmacy/Server/Migrations/20230205041405_initialdb.Designer.cs
                            ProdBrand = "Wastons",
                            ProdCategory = "Supplement",
                            ProdDesc = "Wastons Calcium 500mg 150 Tablets",
                            ProdName = "Calcium",
                            ProdPrice = 45.00m,
                            UpdatedBy = "System"
                        },
                        new
                        {
                            ID = 4,
                            CreatedBy = "System",
<<<<<<<< HEAD:TPharmacy/Server/Migrations/20230205101354_NewApplicationDB.Designer.cs
                            DateCreated = new DateTime(2023, 2, 5, 18, 13, 53, 926, DateTimeKind.Local).AddTicks(2194),
                            DateUpdated = new DateTime(2023, 2, 5, 18, 13, 53, 926, DateTimeKind.Local).AddTicks(2195),
========
                            DateCreated = new DateTime(2023, 2, 5, 12, 14, 4, 783, DateTimeKind.Local).AddTicks(1872),
                            DateUpdated = new DateTime(2023, 2, 5, 12, 14, 4, 783, DateTimeKind.Local).AddTicks(1873),
>>>>>>>> 179d76a671254f2d571593a86fe79de1330e94f8:TPharmacy/Server/Migrations/20230205041405_initialdb.Designer.cs
                            ProdBrand = "Telfast",
                            ProdCategory = "Prescriptions",
                            ProdDesc = "Telfast Panadol 10mg",
                            ProdName = "Panadol",
                            ProdPrice = 20.00m,
                            UpdatedBy = "System"
                        },
                        new
                        {
                            ID = 5,
                            CreatedBy = "System",
<<<<<<<< HEAD:TPharmacy/Server/Migrations/20230205101354_NewApplicationDB.Designer.cs
                            DateCreated = new DateTime(2023, 2, 5, 18, 13, 53, 926, DateTimeKind.Local).AddTicks(2197),
                            DateUpdated = new DateTime(2023, 2, 5, 18, 13, 53, 926, DateTimeKind.Local).AddTicks(2198),
========
                            DateCreated = new DateTime(2023, 2, 5, 12, 14, 4, 783, DateTimeKind.Local).AddTicks(1874),
                            DateUpdated = new DateTime(2023, 2, 5, 12, 14, 4, 783, DateTimeKind.Local).AddTicks(1875),
>>>>>>>> 179d76a671254f2d571593a86fe79de1330e94f8:TPharmacy/Server/Migrations/20230205041405_initialdb.Designer.cs
                            ProdBrand = "Cellucor",
                            ProdCategory = "Sports",
                            ProdDesc = "Cellucor Whey Protein Powder 5LBS",
                            ProdName = "Whey Protein Powder",
                            ProdPrice = 60.00m,
                            UpdatedBy = "System"
                        },
                        new
                        {
                            ID = 6,
                            CreatedBy = "System",
<<<<<<<< HEAD:TPharmacy/Server/Migrations/20230205101354_NewApplicationDB.Designer.cs
                            DateCreated = new DateTime(2023, 2, 5, 18, 13, 53, 926, DateTimeKind.Local).AddTicks(2200),
                            DateUpdated = new DateTime(2023, 2, 5, 18, 13, 53, 926, DateTimeKind.Local).AddTicks(2201),
========
                            DateCreated = new DateTime(2023, 2, 5, 12, 14, 4, 783, DateTimeKind.Local).AddTicks(1877),
                            DateUpdated = new DateTime(2023, 2, 5, 12, 14, 4, 783, DateTimeKind.Local).AddTicks(1877),
>>>>>>>> 179d76a671254f2d571593a86fe79de1330e94f8:TPharmacy/Server/Migrations/20230205041405_initialdb.Designer.cs
                            ProdBrand = "Solaray",
                            ProdCategory = "Baby",
                            ProdDesc = "Solaray Kids Multi Vitamins & Minerals Gummies 120S",
                            ProdName = "Kids Multi Vitamins & Minerals Gummies",
                            ProdPrice = 30.00m,
                            UpdatedBy = "System"
                        });
                });

            modelBuilder.Entity("TPharmacy.Shared.Domain.Staff", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateUpdated")
                        .HasColumnType("datetime2");

                    b.Property<string>("StafEmail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StafName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("StafPassword")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("StafRole")
                        .HasColumnType("int");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("Staffs");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            CreatedBy = "June",
<<<<<<<< HEAD:TPharmacy/Server/Migrations/20230205101354_NewApplicationDB.Designer.cs
                            DateCreated = new DateTime(2023, 2, 5, 18, 13, 53, 927, DateTimeKind.Local).AddTicks(3502),
                            DateUpdated = new DateTime(2023, 2, 5, 18, 13, 53, 927, DateTimeKind.Local).AddTicks(3520),
========
                            DateCreated = new DateTime(2023, 2, 5, 12, 14, 4, 784, DateTimeKind.Local).AddTicks(1520),
                            DateUpdated = new DateTime(2023, 2, 5, 12, 14, 4, 784, DateTimeKind.Local).AddTicks(1529),
>>>>>>>> 179d76a671254f2d571593a86fe79de1330e94f8:TPharmacy/Server/Migrations/20230205041405_initialdb.Designer.cs
                            StafEmail = "june@gmail.com",
                            StafName = "June",
                            StafPassword = "June1234*",
                            StafRole = 0,
                            UpdatedBy = "System"
                        },
                        new
                        {
                            ID = 2,
                            CreatedBy = "June",
<<<<<<<< HEAD:TPharmacy/Server/Migrations/20230205101354_NewApplicationDB.Designer.cs
                            DateCreated = new DateTime(2023, 2, 5, 18, 13, 53, 927, DateTimeKind.Local).AddTicks(3523),
                            DateUpdated = new DateTime(2023, 2, 5, 18, 13, 53, 927, DateTimeKind.Local).AddTicks(3524),
========
                            DateCreated = new DateTime(2023, 2, 5, 12, 14, 4, 784, DateTimeKind.Local).AddTicks(1532),
                            DateUpdated = new DateTime(2023, 2, 5, 12, 14, 4, 784, DateTimeKind.Local).AddTicks(1533),
>>>>>>>> 179d76a671254f2d571593a86fe79de1330e94f8:TPharmacy/Server/Migrations/20230205041405_initialdb.Designer.cs
                            StafEmail = "woon@gmail.com",
                            StafName = "Woon",
                            StafPassword = "June1234*",
                            StafRole = 1,
                            UpdatedBy = "System"
                        },
                        new
                        {
                            ID = 3,
                            CreatedBy = "June",
<<<<<<<< HEAD:TPharmacy/Server/Migrations/20230205101354_NewApplicationDB.Designer.cs
                            DateCreated = new DateTime(2023, 2, 5, 18, 13, 53, 927, DateTimeKind.Local).AddTicks(3576),
                            DateUpdated = new DateTime(2023, 2, 5, 18, 13, 53, 927, DateTimeKind.Local).AddTicks(3577),
========
                            DateCreated = new DateTime(2023, 2, 5, 12, 14, 4, 784, DateTimeKind.Local).AddTicks(1535),
                            DateUpdated = new DateTime(2023, 2, 5, 12, 14, 4, 784, DateTimeKind.Local).AddTicks(1536),
>>>>>>>> 179d76a671254f2d571593a86fe79de1330e94f8:TPharmacy/Server/Migrations/20230205041405_initialdb.Designer.cs
                            StafEmail = "kate@gmail.com",
                            StafName = "Kate",
                            StafPassword = "June1234*",
                            StafRole = 2,
                            UpdatedBy = "System"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("TPharmacy.Server.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("TPharmacy.Server.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TPharmacy.Server.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("TPharmacy.Server.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TPharmacy.Shared.Domain.Consultation", b =>
                {
                    b.HasOne("TPharmacy.Shared.Domain.Customer", "Customer")
                        .WithMany("Consultations")
                        .HasForeignKey("CustomerID");

                    b.HasOne("TPharmacy.Shared.Domain.Staff", "Staff")
                        .WithMany("Consultations")
                        .HasForeignKey("StaffID");

                    b.Navigation("Customer");

                    b.Navigation("Staff");
                });

            modelBuilder.Entity("TPharmacy.Shared.Domain.Order", b =>
                {
                    b.HasOne("TPharmacy.Shared.Domain.Customer", "Customer")
                        .WithMany("Orders")
                        .HasForeignKey("CustomerID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TPharmacy.Shared.Domain.Staff", "Staff")
                        .WithMany("Orders")
                        .HasForeignKey("StaffID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Staff");
                });

            modelBuilder.Entity("TPharmacy.Shared.Domain.OrderItem", b =>
                {
                    b.HasOne("TPharmacy.Shared.Domain.Order", "Order")
                        .WithMany("OrderItems")
                        .HasForeignKey("OrderID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TPharmacy.Shared.Domain.Product", "Product")
                        .WithMany("OrderItems")
                        .HasForeignKey("ProductID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("TPharmacy.Shared.Domain.Payment", b =>
                {
                    b.HasOne("TPharmacy.Shared.Domain.Order", "Order")
                        .WithMany("Payments")
                        .HasForeignKey("OrderID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");
                });

            modelBuilder.Entity("TPharmacy.Shared.Domain.Prescription", b =>
                {
                    b.HasOne("TPharmacy.Shared.Domain.Consultation", "Consultation")
                        .WithMany("Prescriptions")
                        .HasForeignKey("ConsultationID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TPharmacy.Shared.Domain.Product", "Product")
                        .WithMany("Prescriptions")
                        .HasForeignKey("ProductID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Consultation");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("TPharmacy.Shared.Domain.Consultation", b =>
                {
                    b.Navigation("Prescriptions");
                });

            modelBuilder.Entity("TPharmacy.Shared.Domain.Customer", b =>
                {
                    b.Navigation("Consultations");

                    b.Navigation("Orders");
                });

            modelBuilder.Entity("TPharmacy.Shared.Domain.Order", b =>
                {
                    b.Navigation("OrderItems");

                    b.Navigation("Payments");
                });

            modelBuilder.Entity("TPharmacy.Shared.Domain.Product", b =>
                {
                    b.Navigation("OrderItems");

                    b.Navigation("Prescriptions");
                });

            modelBuilder.Entity("TPharmacy.Shared.Domain.Staff", b =>
                {
                    b.Navigation("Consultations");

                    b.Navigation("Orders");
                });
#pragma warning restore 612, 618
        }
    }
}
