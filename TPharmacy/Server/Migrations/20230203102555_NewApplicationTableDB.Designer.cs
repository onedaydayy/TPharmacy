// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TPharmacy.Server.Data;

namespace TPharmacy.Server.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20230203102555_NewApplicationTableDB")]
    partial class NewApplicationTableDB
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.17")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("IdentityServer4.EntityFramework.Entities.DeviceFlowCodes", b =>
                {
                    b.Property<string>("UserCode")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("ClientId")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Data")
                        .IsRequired()
                        .HasMaxLength(50000)
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("DeviceCode")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("Expiration")
                        .IsRequired()
                        .HasColumnType("datetime2");

                    b.Property<string>("SessionId")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("SubjectId")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("UserCode");

                    b.HasIndex("DeviceCode")
                        .IsUnique();

                    b.HasIndex("Expiration");

                    b.ToTable("DeviceCodes");
                });

            modelBuilder.Entity("IdentityServer4.EntityFramework.Entities.PersistedGrant", b =>
                {
                    b.Property<string>("Key")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("ClientId")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("ConsumedTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Data")
                        .IsRequired()
                        .HasMaxLength(50000)
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("Expiration")
                        .HasColumnType("datetime2");

                    b.Property<string>("SessionId")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("SubjectId")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Key");

                    b.HasIndex("Expiration");

                    b.HasIndex("SubjectId", "ClientId", "Type");

                    b.HasIndex("SubjectId", "SessionId", "Type");

                    b.ToTable("PersistedGrants");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");

                    b.HasData(
                        new
                        {
                            Id = "staff",
                            ConcurrencyStamp = "35502cfc-e891-4828-b9d9-024c2b4c65de",
                            Name = "Staff",
                            NormalizedName = "STAFF"
                        },
                        new
                        {
                            Id = "customer",
                            ConcurrencyStamp = "5f99df66-8bf9-4237-8d58-040f3a026189",
                            Name = "Customer",
                            NormalizedName = "CUSTOMER"
                        },
                        new
                        {
                            Id = "admin",
                            ConcurrencyStamp = "ea6442b6-ee05-4fae-9e7e-c8e748d250b1",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "pharmacist",
                            ConcurrencyStamp = "e6e40750-f124-4bc7-a0cb-2dd82d12e1f1",
                            Name = "Pharmacist",
                            NormalizedName = "PHARMACIST"
                        },
                        new
                        {
                            Id = "packer",
                            ConcurrencyStamp = "56c9e86b-f3e0-42d8-8178-1236fa34b1f8",
                            Name = "Packer",
                            NormalizedName = "PACKER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");

                    b.HasData(
                        new
                        {
                            UserId = "3781efa7-66dc-47f0-860f-e506d04102s1",
                            RoleId = "staff"
                        },
                        new
                        {
                            UserId = "3781efa7-66dc-47f0-860f-e506d04102s1",
                            RoleId = "admin"
                        },
                        new
                        {
                            UserId = "3781efa7-66dc-47f0-860f-e506d04102s2",
                            RoleId = "staff"
                        },
                        new
                        {
                            UserId = "3781efa7-66dc-47f0-860f-e506d04102s2",
                            RoleId = "pharmacist"
                        },
                        new
                        {
                            UserId = "3781efa7-66dc-47f0-860f-e506d04102s3",
                            RoleId = "staff"
                        },
                        new
                        {
                            UserId = "3781efa7-66dc-47f0-860f-e506d04102s3",
                            RoleId = "packer"
                        },
                        new
                        {
                            UserId = "3781efa7-66dc-47f0-860f-e506d04102c1",
                            RoleId = "customer"
                        },
                        new
                        {
                            UserId = "3781efa7-66dc-47f0-860f-e506d04102c2",
                            RoleId = "customer"
                        },
                        new
                        {
                            UserId = "3781efa7-66dc-47f0-860f-e506d04102c3",
                            RoleId = "customer"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("TPharmacy.Server.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("Role")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");

                    b.HasData(
                        new
                        {
                            Id = "3781efa7-66dc-47f0-860f-e506d04102s1",
                            AccessFailedCount = 0,
                            Address = "TPharmacy",
                            ConcurrencyStamp = "d07a0a3d-9319-4655-a62d-5f50976f6cd3",
                            Email = "june@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = true,
                            Name = "June",
                            NormalizedEmail = "JUNE@GMAIL.COM",
                            NormalizedUserName = "JUNE@GMAIL.COM",
                            Password = "June1234*",
                            PasswordHash = "AQAAAAEAACcQAAAAEPQd9HJK3iWQXmNnaLaH7BYIiMD2UGEBGcziB00fMPNvVXzwLjUoo0dn4nLykDZTpQ==",
                            PhoneNumber = "9273 8983",
                            PhoneNumberConfirmed = true,
                            Role = "Staff",
                            SecurityStamp = "88a7f02d-7b41-422c-a0d0-847783001344",
                            TwoFactorEnabled = false,
                            UserName = "june@gmail.com"
                        },
                        new
                        {
                            Id = "3781efa7-66dc-47f0-860f-e506d04102s2",
                            AccessFailedCount = 0,
                            Address = "TPharmacy",
                            ConcurrencyStamp = "fba1efa4-3737-44c8-9386-ac840131a563",
                            Email = "woon@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = true,
                            Name = "Woon",
                            NormalizedEmail = "WOON@GMAIL.COM",
                            NormalizedUserName = "WOON@GMAIL.COM",
                            Password = "June1234*",
                            PasswordHash = "AQAAAAEAACcQAAAAEDWEK+CrZ9iPcwRJWRPbDXxBW4kSHHVtfMlvtb5AKniSyuCsyokEeC+Plw3s3fxXiA==",
                            PhoneNumber = "9287 2324",
                            PhoneNumberConfirmed = true,
                            Role = "Staff",
                            SecurityStamp = "9384e1bc-f0e6-419b-be9a-130c787819c3",
                            TwoFactorEnabled = false,
                            UserName = "woon@gmail.com"
                        },
                        new
                        {
                            Id = "3781efa7-66dc-47f0-860f-e506d04102s3",
                            AccessFailedCount = 0,
                            Address = "TPharmacy",
                            ConcurrencyStamp = "066df273-504e-44b6-87cb-cccd6bc89019",
                            Email = "kate@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = true,
                            Name = "Kate",
                            NormalizedEmail = "KATE@GMAIL.COM",
                            NormalizedUserName = "KATE@GMAIL.COM",
                            Password = "June1234*",
                            PasswordHash = "AQAAAAEAACcQAAAAEBwW2qeoZYeGmnnt7/fgwpFwbx8WEwClXubUjKW0xVuXFqGJzVqhtpl5Or0PT3jx3Q==",
                            PhoneNumber = "6329 9823",
                            PhoneNumberConfirmed = true,
                            Role = "Staff",
                            SecurityStamp = "8778ceed-2144-40c8-9ca8-1453610a5565",
                            TwoFactorEnabled = false,
                            UserName = "kate@gmail.com"
                        },
                        new
                        {
                            Id = "3781efa7-66dc-47f0-860f-e506d04102c1",
                            AccessFailedCount = 0,
                            Address = "Tampines Ave 1",
                            ConcurrencyStamp = "fc1a1dd3-e0a8-414f-8704-a11bb35bf083",
                            Email = "james@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = true,
                            Name = "James",
                            NormalizedEmail = "JAMES@GMAIL.COM",
                            NormalizedUserName = "JAMES@GMAIL.COM",
                            Password = "June1234*",
                            PasswordHash = "AQAAAAEAACcQAAAAENLEg+rimT0CSyV3stiNP8zpJFgKcj1cg+789cMXbRwHelIbY6L5V00/JQXs+iVm6g==",
                            PhoneNumber = "8211 7319",
                            PhoneNumberConfirmed = true,
                            Role = "Customer",
                            SecurityStamp = "2574fa54-6d8b-4ccd-a522-101ed4191ef0",
                            TwoFactorEnabled = false,
                            UserName = "james@gmail.com"
                        },
                        new
                        {
                            Id = "3781efa7-66dc-47f0-860f-e506d04102c2",
                            AccessFailedCount = 0,
                            Address = "Bedok Ave 1",
                            ConcurrencyStamp = "43f57748-382a-4e8c-b6d3-c9df3d38ade6",
                            Email = "alice@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = true,
                            Name = "Alice",
                            NormalizedEmail = "ALICE@GMAIL.COM",
                            NormalizedUserName = "ALICE@GMAIL.COM",
                            Password = "June1234*",
                            PasswordHash = "AQAAAAEAACcQAAAAEGUAVUp8xy8ZG8G2TroiFp5Cyj1yyvFeQcmOhhoe9SpaJiqciVOJet2+rPfyk0RdPg==",
                            PhoneNumber = "8329 7433",
                            PhoneNumberConfirmed = true,
                            Role = "Customer",
                            SecurityStamp = "563d9b7d-952e-4232-8310-82f34108238c",
                            TwoFactorEnabled = false,
                            UserName = "alice@gmail.com"
                        },
                        new
                        {
                            Id = "3781efa7-66dc-47f0-860f-e506d04102c3",
                            AccessFailedCount = 0,
                            Address = "Jurong Ave 1",
                            ConcurrencyStamp = "1b70931d-9fe8-4e64-a901-47c4c206ab4c",
                            Email = "sheila@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = true,
                            Name = "Sheila",
                            NormalizedEmail = "SHEILA@GMAIL.COM",
                            NormalizedUserName = "SHEILA@GMAIL.COM",
                            Password = "June1234*",
                            PasswordHash = "AQAAAAEAACcQAAAAEDppuOxvfiAuQTwWLCA1sLmWCVsidFw/CsMsIA6PHxzA/2DNOU5gwz7f39Hg7MvBCg==",
                            PhoneNumber = "9436 7238",
                            PhoneNumberConfirmed = true,
                            Role = "Customer",
                            SecurityStamp = "9b9bc020-fea4-4b3c-9f49-d8a0d46a0a9a",
                            TwoFactorEnabled = false,
                            UserName = "sheila@gmail.com"
                        });
                });

            modelBuilder.Entity("TPharmacy.Shared.Domain.Consultation", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("ConDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ConDesc")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("ConEndTime")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("ConFee")
                        .HasColumnType("decimal(7,2)");

                    b.Property<DateTime?>("ConStartTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("ConStatus")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CustomerID")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateUpdated")
                        .HasColumnType("datetime2");

                    b.Property<int?>("StaffID")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("CustomerID");

                    b.HasIndex("StaffID");

                    b.ToTable("Consultations");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            ConDate = new DateTime(2023, 2, 3, 18, 25, 55, 136, DateTimeKind.Local).AddTicks(2516),
                            ConDesc = "Flu Consultation",
                            ConEndTime = new DateTime(2023, 2, 3, 19, 34, 55, 136, DateTimeKind.Local).AddTicks(3180),
                            ConFee = 35.50m,
                            ConStartTime = new DateTime(2023, 2, 3, 18, 25, 55, 136, DateTimeKind.Local).AddTicks(2672),
                            ConStatus = "Completed",
                            CreatedBy = "Woon",
                            CustomerID = 1,
                            DateCreated = new DateTime(2023, 2, 3, 18, 25, 55, 136, DateTimeKind.Local).AddTicks(3938),
                            DateUpdated = new DateTime(2023, 2, 3, 18, 25, 55, 136, DateTimeKind.Local).AddTicks(3942),
                            StaffID = 2,
                            UpdatedBy = "System"
                        },
                        new
                        {
                            ID = 2,
                            ConDate = new DateTime(2023, 2, 3, 18, 25, 55, 136, DateTimeKind.Local).AddTicks(3946),
                            ConDesc = "Eczema Consultation",
                            ConEndTime = new DateTime(2023, 2, 3, 19, 25, 55, 136, DateTimeKind.Local).AddTicks(3948),
                            ConFee = 30.50m,
                            ConStartTime = new DateTime(2023, 2, 3, 18, 25, 55, 136, DateTimeKind.Local).AddTicks(3947),
                            ConStatus = "Pending",
                            CreatedBy = "Woon",
                            CustomerID = 3,
                            DateCreated = new DateTime(2023, 2, 3, 18, 25, 55, 136, DateTimeKind.Local).AddTicks(3955),
                            DateUpdated = new DateTime(2023, 2, 3, 18, 25, 55, 136, DateTimeKind.Local).AddTicks(3956),
                            StaffID = 2,
                            UpdatedBy = "System"
                        });
                });

            modelBuilder.Entity("TPharmacy.Shared.Domain.Customer", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CusAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CusEmail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CusName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("CusNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CusPassword")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateUpdated")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("Customers");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            CreatedBy = "System",
                            CusAddress = "Tampines Ave 1",
                            CusEmail = "james@gmail.com",
                            CusName = "James",
                            CusNumber = "87439653",
                            CusPassword = "June1234*",
                            DateCreated = new DateTime(2023, 2, 3, 18, 25, 55, 135, DateTimeKind.Local).AddTicks(5463),
                            DateUpdated = new DateTime(2023, 2, 3, 18, 25, 55, 135, DateTimeKind.Local).AddTicks(5471),
                            UpdatedBy = "System"
                        },
                        new
                        {
                            ID = 2,
                            CreatedBy = "System",
                            CusAddress = "Bedok Ave 1",
                            CusEmail = "alice@gmail.com",
                            CusName = "Alice",
                            CusNumber = "96512845",
                            CusPassword = "June1234*",
                            DateCreated = new DateTime(2023, 2, 3, 18, 25, 55, 135, DateTimeKind.Local).AddTicks(5474),
                            DateUpdated = new DateTime(2023, 2, 3, 18, 25, 55, 135, DateTimeKind.Local).AddTicks(5475),
                            UpdatedBy = "System"
                        },
                        new
                        {
                            ID = 3,
                            CreatedBy = "System",
                            CusAddress = "Jurong Ave 1",
                            CusEmail = "sheila@gmail.com",
                            CusName = "Sheila",
                            CusNumber = "87511773",
                            CusPassword = "June1234*",
                            DateCreated = new DateTime(2023, 2, 3, 18, 25, 55, 135, DateTimeKind.Local).AddTicks(5477),
                            DateUpdated = new DateTime(2023, 2, 3, 18, 25, 55, 135, DateTimeKind.Local).AddTicks(5478),
                            UpdatedBy = "System"
                        });
                });

            modelBuilder.Entity("TPharmacy.Shared.Domain.Order", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CustomerID")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateUpdated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("OrderDateTime")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("OrderFee")
                        .HasColumnType("decimal(7,2)");

                    b.Property<decimal>("OrderItemTotal")
                        .HasColumnType("decimal(7,2)");

                    b.Property<int>("OrderStatus")
                        .HasColumnType("int");

                    b.Property<decimal>("OrderTotal")
                        .HasColumnType("decimal(7,2)");

                    b.Property<int>("StaffID")
                        .HasColumnType("int");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("CustomerID");

                    b.HasIndex("StaffID");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("TPharmacy.Shared.Domain.OrderItem", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateUpdated")
                        .HasColumnType("datetime2");

                    b.Property<int>("OrderID")
                        .HasColumnType("int");

                    b.Property<int>("OrderItemQtny")
                        .HasColumnType("int");

                    b.Property<decimal>("OrderItemTotal")
                        .HasColumnType("decimal(7,2)");

                    b.Property<int>("ProductID")
                        .HasColumnType("int");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("OrderID");

                    b.HasIndex("ProductID");

                    b.ToTable("OrderItems");
                });

            modelBuilder.Entity("TPharmacy.Shared.Domain.Payment", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateUpdated")
                        .HasColumnType("datetime2");

                    b.Property<int>("OrderID")
                        .HasColumnType("int");

                    b.Property<string>("PayCardInfo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("PayFee")
                        .HasColumnType("decimal(7,2)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("OrderID");

                    b.ToTable("Payments");
                });

            modelBuilder.Entity("TPharmacy.Shared.Domain.Prescription", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("ConsultationID")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateUpdated")
                        .HasColumnType("datetime2");

                    b.Property<int>("PresQty")
                        .HasColumnType("int");

                    b.Property<int?>("ProductID")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("ConsultationID");

                    b.HasIndex("ProductID");

                    b.ToTable("Prescriptions");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            ConsultationID = 1,
                            CreatedBy = "System",
                            DateCreated = new DateTime(2023, 2, 3, 18, 25, 55, 135, DateTimeKind.Local).AddTicks(8553),
                            DateUpdated = new DateTime(2023, 2, 3, 18, 25, 55, 135, DateTimeKind.Local).AddTicks(8559),
                            PresQty = 1,
                            ProductID = 4,
                            UpdatedBy = "System"
                        },
                        new
                        {
                            ID = 2,
                            ConsultationID = 2,
                            CreatedBy = "System",
                            DateCreated = new DateTime(2023, 2, 3, 18, 25, 55, 135, DateTimeKind.Local).AddTicks(8563),
                            DateUpdated = new DateTime(2023, 2, 3, 18, 25, 55, 135, DateTimeKind.Local).AddTicks(8564),
                            PresQty = 2,
                            ProductID = 4,
                            UpdatedBy = "System"
                        });
                });

            modelBuilder.Entity("TPharmacy.Shared.Domain.Product", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateUpdated")
                        .HasColumnType("datetime2");

                    b.Property<string>("ProdBrand")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProdCategory")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProdDesc")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ProdName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<decimal>("ProdPrice")
                        .HasColumnType("decimal(7,2)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            CreatedBy = "System",
                            DateCreated = new DateTime(2023, 2, 3, 18, 25, 55, 132, DateTimeKind.Local).AddTicks(9894),
                            DateUpdated = new DateTime(2023, 2, 3, 18, 25, 55, 133, DateTimeKind.Local).AddTicks(8501),
                            ProdBrand = "Blackmores",
                            ProdCategory = "Supplement",
                            ProdDesc = "BLACKMORES Bio Vitamin C 1000mg 120 Tablets",
                            ProdName = "Vitamin C",
                            ProdPrice = 35.00m,
                            UpdatedBy = "System"
                        },
                        new
                        {
                            ID = 2,
                            CreatedBy = "System",
                            DateCreated = new DateTime(2023, 2, 3, 18, 25, 55, 133, DateTimeKind.Local).AddTicks(9033),
                            DateUpdated = new DateTime(2023, 2, 3, 18, 25, 55, 133, DateTimeKind.Local).AddTicks(9036),
                            ProdBrand = "Swisse",
                            ProdCategory = "Supplement",
                            ProdDesc = "Swisse Omega 3 Fish Oil 1500mg 100 Tablets",
                            ProdName = "Omega 3 Fish Oil",
                            ProdPrice = 58.00m,
                            UpdatedBy = "System"
                        },
                        new
                        {
                            ID = 3,
                            CreatedBy = "System",
                            DateCreated = new DateTime(2023, 2, 3, 18, 25, 55, 133, DateTimeKind.Local).AddTicks(9038),
                            DateUpdated = new DateTime(2023, 2, 3, 18, 25, 55, 133, DateTimeKind.Local).AddTicks(9039),
                            ProdBrand = "Wastons",
                            ProdCategory = "Supplement",
                            ProdDesc = "Wastons Calcium 500mg 150 Tablets",
                            ProdName = "Calcium",
                            ProdPrice = 45.00m,
                            UpdatedBy = "System"
                        },
                        new
                        {
                            ID = 4,
                            CreatedBy = "System",
                            DateCreated = new DateTime(2023, 2, 3, 18, 25, 55, 133, DateTimeKind.Local).AddTicks(9045),
                            DateUpdated = new DateTime(2023, 2, 3, 18, 25, 55, 133, DateTimeKind.Local).AddTicks(9046),
                            ProdBrand = "Telfast",
                            ProdCategory = "Prescriptions",
                            ProdDesc = "Telfast Panadol 10mg",
                            ProdName = "Panadol",
                            ProdPrice = 20.00m,
                            UpdatedBy = "System"
                        },
                        new
                        {
                            ID = 5,
                            CreatedBy = "System",
                            DateCreated = new DateTime(2023, 2, 3, 18, 25, 55, 133, DateTimeKind.Local).AddTicks(9048),
                            DateUpdated = new DateTime(2023, 2, 3, 18, 25, 55, 133, DateTimeKind.Local).AddTicks(9049),
                            ProdBrand = "Cellucor",
                            ProdCategory = "Sports",
                            ProdDesc = "Cellucor Whey Protein Powder 5LBS",
                            ProdName = "Whey Protein Powder",
                            ProdPrice = 60.00m,
                            UpdatedBy = "System"
                        },
                        new
                        {
                            ID = 6,
                            CreatedBy = "System",
                            DateCreated = new DateTime(2023, 2, 3, 18, 25, 55, 133, DateTimeKind.Local).AddTicks(9051),
                            DateUpdated = new DateTime(2023, 2, 3, 18, 25, 55, 133, DateTimeKind.Local).AddTicks(9052),
                            ProdBrand = "Solaray",
                            ProdCategory = "Baby",
                            ProdDesc = "Solaray Kids Multi Vitamins & Minerals Gummies 120S",
                            ProdName = "Kids Multi Vitamins & Minerals Gummies",
                            ProdPrice = 30.00m,
                            UpdatedBy = "System"
                        });
                });

            modelBuilder.Entity("TPharmacy.Shared.Domain.Staff", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateUpdated")
                        .HasColumnType("datetime2");

                    b.Property<string>("StafEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StafName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StafPassword")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StafRole")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("Staffs");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            CreatedBy = "June",
                            DateCreated = new DateTime(2023, 2, 3, 18, 25, 55, 135, DateTimeKind.Local).AddTicks(1991),
                            DateUpdated = new DateTime(2023, 2, 3, 18, 25, 55, 135, DateTimeKind.Local).AddTicks(2013),
                            StafEmail = "june@gmail.com",
                            StafName = "June",
                            StafPassword = "June1234*",
                            StafRole = "Admin",
                            UpdatedBy = "System"
                        },
                        new
                        {
                            ID = 2,
                            CreatedBy = "June",
                            DateCreated = new DateTime(2023, 2, 3, 18, 25, 55, 135, DateTimeKind.Local).AddTicks(2016),
                            DateUpdated = new DateTime(2023, 2, 3, 18, 25, 55, 135, DateTimeKind.Local).AddTicks(2017),
                            StafEmail = "woon@gmail.com",
                            StafName = "Woon",
                            StafPassword = "June1234*",
                            StafRole = "Pharmacist",
                            UpdatedBy = "System"
                        },
                        new
                        {
                            ID = 3,
                            CreatedBy = "June",
                            DateCreated = new DateTime(2023, 2, 3, 18, 25, 55, 135, DateTimeKind.Local).AddTicks(2018),
                            DateUpdated = new DateTime(2023, 2, 3, 18, 25, 55, 135, DateTimeKind.Local).AddTicks(2019),
                            StafEmail = "kate@gmail.com",
                            StafName = "Kate",
                            StafPassword = "June1234*",
                            StafRole = "Packer",
                            UpdatedBy = "System"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("TPharmacy.Server.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("TPharmacy.Server.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TPharmacy.Server.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("TPharmacy.Server.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TPharmacy.Shared.Domain.Consultation", b =>
                {
                    b.HasOne("TPharmacy.Shared.Domain.Customer", "Customer")
                        .WithMany("Consultations")
                        .HasForeignKey("CustomerID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TPharmacy.Shared.Domain.Staff", "Staff")
                        .WithMany("Consultations")
                        .HasForeignKey("StaffID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Staff");
                });

            modelBuilder.Entity("TPharmacy.Shared.Domain.Order", b =>
                {
                    b.HasOne("TPharmacy.Shared.Domain.Customer", "Customer")
                        .WithMany("Orders")
                        .HasForeignKey("CustomerID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TPharmacy.Shared.Domain.Staff", "Staff")
                        .WithMany("Orders")
                        .HasForeignKey("StaffID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Staff");
                });

            modelBuilder.Entity("TPharmacy.Shared.Domain.OrderItem", b =>
                {
                    b.HasOne("TPharmacy.Shared.Domain.Order", "Order")
                        .WithMany("OrderItems")
                        .HasForeignKey("OrderID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TPharmacy.Shared.Domain.Product", "Product")
                        .WithMany("OrderItems")
                        .HasForeignKey("ProductID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("TPharmacy.Shared.Domain.Payment", b =>
                {
                    b.HasOne("TPharmacy.Shared.Domain.Order", "Order")
                        .WithMany("Payments")
                        .HasForeignKey("OrderID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");
                });

            modelBuilder.Entity("TPharmacy.Shared.Domain.Prescription", b =>
                {
                    b.HasOne("TPharmacy.Shared.Domain.Consultation", "Consultation")
                        .WithMany("Prescriptions")
                        .HasForeignKey("ConsultationID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TPharmacy.Shared.Domain.Product", "Product")
                        .WithMany("Prescriptions")
                        .HasForeignKey("ProductID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Consultation");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("TPharmacy.Shared.Domain.Consultation", b =>
                {
                    b.Navigation("Prescriptions");
                });

            modelBuilder.Entity("TPharmacy.Shared.Domain.Customer", b =>
                {
                    b.Navigation("Consultations");

                    b.Navigation("Orders");
                });

            modelBuilder.Entity("TPharmacy.Shared.Domain.Order", b =>
                {
                    b.Navigation("OrderItems");

                    b.Navigation("Payments");
                });

            modelBuilder.Entity("TPharmacy.Shared.Domain.Product", b =>
                {
                    b.Navigation("OrderItems");

                    b.Navigation("Prescriptions");
                });

            modelBuilder.Entity("TPharmacy.Shared.Domain.Staff", b =>
                {
                    b.Navigation("Consultations");

                    b.Navigation("Orders");
                });
#pragma warning restore 612, 618
        }
    }
}
