@inject HttpClient _client
@using System.Security.Claims
@attribute [Authorize]
@inject HttpClient Http


<EditForm Model="@consultation" OnValidSubmit="@OnValidSubmit">
    <fieldset disabled="@Disabled">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="form-group">
            <label>Name: </label>
            <div>
                <input type="text" value="@user.Identity.Name" class="form-control" />
            </div>
        </div>
        <div class="form-group">
            <label>Date: </label>
            <div>
                <input type="datetime-local" @bind="@consultation.ConDate" min="1900-01-01T00:00" max="9999-12-31T00:00" class="form-control" />
                <ValidationMessage For="@(() => consultation.ConDate)" />
            </div>
        </div>
        <div class="form-group">
            <label>Time: </label>
            <div>
                <input type="time" @bind="@consultation.ConStartTime" @bind:format="HH:mm" />
                <ValidationMessage For="@(() => consultation.ConStartTime)" />
            </div>
        </div>
        <div class="form-group">
            <label>Information: </label>
            <div>
                <InputTextArea placeholder="Description" @bind-Value="@consultation.ConDesc" class="form-control" />
                <ValidationMessage For="@(() => consultation.ConDesc)" />
            </div>
        </div>
        @if (!Disabled)
        {
            <button type="submit" class="btn btn-success btn-block">
                @ButtonText
            </button>
        }
    </fieldset>
    <TPharmacy.Client.Components.BackToList Target="/" />
</EditForm>

@code
{
    [Parameter] public bool Disabled { get; set; } = false;
    [Parameter] public Consultation consultation { get; set; }
    [Parameter] public string ButtonText { get; set; } = "Save";
    [Parameter] public EventCallback OnValidSubmit { get; set; }

    [CascadingParameter]
    public Task<AuthenticationState> AuthTask { get; set; }

    private ClaimsPrincipal user;

    protected async override Task OnInitializedAsync()
    {
        if (AuthTask == null)
        {
            return;
        }

        try
        {
            var authState = await AuthTask;
            this.user = authState.User;
        }
        catch (Exception ex)
        {
            // Handle exception
        }
    }
}
