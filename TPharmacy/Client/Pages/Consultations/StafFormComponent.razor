@inject HttpClient _client
@using System.Security.Claims
@attribute [Authorize(Roles = "Admin, Packer, Pharmacist, Staff")]
@inject HttpClient Http


<EditForm Model="@consultation" OnValidSubmit="@OnValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <fieldset disabled="@Disabled">
        <div class="form-group">
            <label>Date & Time: </label>
            <div>
                <TPharmacy.Client.Models.InputDateTime @bind-Value="@consultation.ConDate" class="form-control" />
            </div>
        </div>
        <div class="form-group">
            <label>Information: </label>
            <div>
                <InputTextArea placeholder="Description" @bind-Value="@consultation.ConDesc" class="form-control" />
            </div>
        </div>
        <div class="form-group">
            <label>Total Duration: </label>
            <div>
                <InputNumber @bind-Value="@consultation.ConDuration" class="form-control" />
            </div>
        </div>
        <div class="form-group">
            <label>Total Duration: </label>
            <div>
                <InputSelect @bind-Value="@consultation.ConStatus" class="form-control">
                    <option value="Pending">Pending</option>
                    <option value="Completed">Completed</option>
                </InputSelect>
            </div>
        </div>

        @if (!Disabled)
        {
            <button type="submit" class="btn btn-success btn-block">
                @ButtonText
            </button>
            <br />
        }
    </fieldset>
</EditForm>

@code
{
    [Parameter] public bool Disabled { get; set; } = false;
    [Parameter] public Consultation consultation { get; set; }
    [Parameter] public string ButtonText { get; set; } = "Save";
    [Parameter] public EventCallback OnValidSubmit { get; set; }

    [CascadingParameter]
    public Task<AuthenticationState> AuthTask { get; set; }

    private ClaimsPrincipal user;

    protected async override Task OnInitializedAsync()
    {
        if (AuthTask == null)
        {
            return;
        }

        try
        {
            var authState = await AuthTask;
            this.user = authState.User;
        }
        catch (Exception ex)
        {
            // Handle exception
        }
    }
}
