@page "/shoppingcart"
@inject HttpClient _client
@inject IJSRuntime js
@inject NavigationManager _navManager
@inject AuthenticationStateProvider GetAuthenticationStateAsync
@attribute [Authorize]

<div class="container mt-5">
    <div class="shopping-cart">
        <h1 class="header text-center">Shopping Cart</h1>
        <div class="cart-items-container">
            @if (OrderItems == null)
            {
                <div class="alert alert-info text-center">Loading items...</div>
            }
            else if (OrderItems.Count == 0)
            {
                <div class="alert alert-info text-center">No items in the shopping cart</div>
            }
            else
            {
                decimal total = 0;
                @foreach (var orderitem in OrderItems)
                {
                    <div class="cart-item row">
                        <div class="col-md-3 product-photo">
                            <img src="img/@orderitem.Product.ProdName .jpeg" class="Product Image">
                        </div>
                        <div class="col-md-6 product-info">
                            <h3>Product ID: @orderitem.ProductID</h3>
                            <h5>Quantity: @orderitem.OrderItemQtny</h5>
                            <h5>Description: @orderitem.Product.ProdDesc</h5>
                            <h5>Total: $@orderitem.OrderItemTotal</h5>
                        </div>
                        <div class="col-md-3 text-center">
                            <div class="edit-item-button">
                                <a href="/shoppingcart/edit/@orderitem.ID" class="btn btn-primary">
                                    Edit
                                </a>
                            </div>
                            <div class="remove-item-button" @onclick="@(() => DeleteOrderItem(orderitem.ID))">
                                <button class="btn btn-danger">Remove</button>
                            </div>
                        </div>
                    </div>
                    total += orderitem.OrderItemTotal;
                }
                <div class="cart-total text-left" style="padding-left: 900px;">
                    <h4>Total: $@total</h4>
                    <div class="checkout-button text-right" @onclick="@(() => CheckOut())">
                        <button class="btn btn-primary">Checkout</button>
                    </div>
                </div>
            }
        </div>
    </div>
</div>

@code {
    private List<OrderItem> OrderItems;
    private List<Customer> Customers;
    private string name;

    protected async override Task OnInitializedAsync()
    {
        name = await GetUserName();
        OrderItems = await _client.GetFromJsonAsync<List<OrderItem>>($"{Endpoints.OrderItemsEndpoint}/customer");
        Customers = await _client.GetFromJsonAsync<List<Customer>>($"{Endpoints.CustomersEndpoint}");
    }

    private async Task<string> GetUserName()
    {
        var authstate = await GetAuthenticationStateAsync.GetAuthenticationStateAsync();
        var user = authstate.User; return user.Identity.Name;
    }

    private async Task DeleteOrderItem(int orderitemID)
    {
        var orderitem = OrderItems.FirstOrDefault(q => q.ID == orderitemID);
        if (orderitem == null)
        {
            await js.InvokeVoidAsync("alert", "Order item not found!");
            return;
        }
        var confirm = await js.InvokeAsync<bool>
        ("confirm", $"Do you want to delete {orderitem.ID}?");
        if (confirm)
        {
            await _client.DeleteAsync($"{Endpoints.OrderItemsEndpoint}/{orderitemID}");
            OrderItems = await _client.GetFromJsonAsync<List<OrderItem>>($"{Endpoints.OrderItemsEndpoint}/customer");
        }
    }


    async Task CheckOut()
    {
        decimal total = 0;
        foreach (var orderitem in OrderItems)
        {
            total += orderitem.OrderItemTotal;
        }

        Console.WriteLine("shoppingcart" + total);
        var customer = Customers.FirstOrDefault(c => c.CusEmail == name);
        if (customer == null)
        {
            await js.InvokeVoidAsync("alert", "Customer not found!");
            return;
        }

        var order = new Order
        {
            OrderDateTime = DateTime.Now,
            OrderItemTotal = total // fixed this line

        };
        await _client.PutAsJsonAsync($"{Endpoints.OrdersEndpoint}/checkout", order);
        OrderItems.Clear(); // added line to clear the shopping cart after checkout
        _navManager.NavigateTo("/cusorders");
    }

}

