@page "/orderitems/view/{id:int}"
@inject HttpClient _client
@inject IJSRuntime js
@inject NavigationManager _navManager

<div class="container my-5">
    <div class="d-flex justify-content-between align-items-center">
        <h1 class="header">View OrderItem- @orderitem.ID</h1>
        <button class="btn btn-outline-secondary" @onclick="GoBack">
            <i class="fas fa-arrow-left"></i> Go Back
        </button>
    </div>
    <div class="card">
        <div class="card-body">
            @if (orderitem.Product != null)
            {
                <div class="row">
                    <div class="col-md-5">
                        <img src="img/@orderitem.Product.ProdName .jpeg" class="img-fluid" alt="Product Image">
                    </div>
                    <div class="col-md-7">
                        <br />
                        <h2 class="card-title">@orderitem.Product.ProdName</h2>
                        <h5 class="card-subtitle text-muted">Product ID: @orderitem.Product.ID</h5>
                        <br />
                        <h4 class="price text">$ @orderitem.Product.ProdPrice</h4>
                        <div class="form-group">
                            <label class="font-weight-bold">Quantity:</label>
                            <h5>@orderitem.OrderItemQtny</h5>
                        </div>
                        <div class="form-group">
                            <label class="font-weight-bold">Total:</label>
                            <h5>@orderitem.OrderItemTotal</h5>
                        </div>
                        <p class="card-text">@orderitem.Product.ProdDesc</p>
                    </div>
                </div>
            }
        </div>
    </div>
</div>
@code
{
    [Parameter] public bool Disabled { get; set; } = false;
    [Parameter] public int id { get; set; }
    OrderItem orderitem = new OrderItem();
    protected async override Task OnParametersSetAsync()
    {
        orderitem = await _client.GetFromJsonAsync<OrderItem>($"{Endpoints.OrderItemsEndpoint}/{id}");
        if (orderitem.ProductID != null)
        {
            var product = await _client.GetFromJsonAsync<Product>($"{Endpoints.ProductsEndpoint}/{orderitem.ProductID}");
            orderitem.Product = product;
        }
    }

    private async Task GoBack()
    {
        await js.InvokeAsync<object>("history.back");
    }
}