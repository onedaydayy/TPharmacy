@page "/shoppingcart/edit/{id:int}"
@inject HttpClient _client
@inject NavigationManager _navManager

<div class="container mt-5">
    @if (orderitem != null)
    {
        <EditForm Model="@orderitem" OnValidSubmit="EditOrderItem">
            <DataAnnotationsValidator />
            <ValidationSummary />
            <div class="card">
                <div class="card-body">
                    <h2 class="card-title text-center">@orderitem.Product.ProdName - @orderitem.Product.ID</h2>
                    <div class="row">
                        <div class="col-md-6">
                            <img src="img/@orderitem.Product.ProdName .jpeg" class="img-fluid img-thumbnail" alt="Product Image">
                        </div>
                        <div class="col-md-6">
                            <h2 class="price text-left" style="padding-top: 30px;">$ @orderitem.Product.ProdPrice</h2>
                            <div class="form-group" style="padding-top: 20px;">
                                <h5>Quantity</h5>
                                <InputNumber @bind-Value="@orderitem.OrderItemQtny" class="form-control" Min=1 Max=100 />
                                <ValidationMessage For="@(() => orderitem.OrderItemQtny)" />
                            </div>
                            <h5 class="text-left" style="padding-top: 20px; padding-bottom: 20px;">
                                Free Shipping
                            </h5>
                            <button type="submit" class="btn btn-success btn-block">
                                <span class="oi oi-cart"></span> Update the Cart
                            </button>
                            <div class="card-text" style="padding-top: 30px;">
                                @orderitem.Product.ProdDesc
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </EditForm>
    }
</div>
@code
{
    private OrderItem orderitem;
    [Parameter] public int id { get; set; }

    protected async override Task OnInitializedAsync()
    {
        orderitem = await _client.GetFromJsonAsync<OrderItem>($"{Endpoints.OrderItemsEndpoint}/{id}");
        if (orderitem != null)
        {
            var product = await _client.GetFromJsonAsync<Product>($"{Endpoints.ProductsEndpoint}/{orderitem.ProductID}");
            orderitem.Product = product;
        }
    }

    private async Task EditOrderItem()
    {
        await _client.PutAsJsonAsync($"{Endpoints.OrderItemsEndpoint}/{orderitem.ID}", orderitem);
        await OnInitializedAsync();
        StateHasChanged();
        _navManager.NavigateTo("/shoppingcart");
    }

}