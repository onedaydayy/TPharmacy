@page "/prescription/view"
@inject HttpClient _client
@inject IJSRuntime js
@attribute [Authorize]
@implements IDisposable
@inject HttpInterceptorService _interceptor

<div class="container mt-5">
    <h1 class="header">Prescriptions </h1>
    <br />
    @if (Prescriptions == null)
    {
        <div class="alert alert-info">Loading Prescription...</div>
    }
    else
    {
        <table class="table table-striped align-middle table-bordered responsive-table" id="prescriptionsTable">
            <thead>
                <tr>
                    <th>ID</th>
                    <th>Consultation ID</th>
                    <th>Product ID</th>
                    <th>Pres Qty</th>
                    <th>Action</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var prescription in Prescriptions)
                {
                    <tr>
                        <td>@prescription.ID</td>
                        <td>@prescription.ConsultationID</td>
                        <td>@prescription.ProductID</td>
                        <td>@prescription.PresQty</td>
                        <td>
                            <a href="/staffs/view/@prescription.ID" class="btn btn-primary">
                                <span class="oi oi-book"></span>
                            </a>
                            <a href="/staffs/edit/@prescription.ID" class="btn btn-warning">
                                <span class="oi oi-pencil"></span>
                            </a>
                            <button class="btn btn-danger" @onclick="@(()=>Delete(prescription.ID))">
                                <span class="oi oi-delete"></span>
                            </button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    }
</div>

@code 
{
    private List<Prescription> Prescriptions;

    protected async override Task OnInitializedAsync()
    {
        _interceptor.MonitorEvent();
        Prescriptions = await _client.GetFromJsonAsync<List<Prescription>>($"{Endpoints.PrescriptionsEndpoint}");
    }

    protected async override Task OnAfterRenderAsync(bool firstRender)
    {
        await js.InvokeVoidAsync("AddDataTable", "#prescriptionsTable");
    }

    public void Dispose()
    {
        js.InvokeVoidAsync("DataTablesDispose", "#prescriptionsTable");
    }

    async Task Delete(int prescriptionID)
    {
        var prescription = Prescriptions.First(q => q.ID == prescriptionID);
        var confirm = await js.InvokeAsync<bool>("confirm", $"Do you want to delete {prescription.ID}?");
        if (confirm)
        {
            await _client.DeleteAsync($"{Endpoints.PrescriptionsEndpoint}/{prescriptionID}");
            await OnInitializedAsync();
        }
    }

    public void Disposes()
    {
        _interceptor.DisposeEvent();
    }
}
