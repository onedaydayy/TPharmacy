@page "/staffs"
@inject HttpClient _client
@inject IJSRuntime js
@attribute [Authorize]
@implements IDisposable

<div class="container mt-5">
    <h1 class="header">Overview of TPharmacy Staff's</h1>
    <h3>Welcome to the Staff Home! </h3>
    <div class="row">
        <div class="col-md-8">
            <br />
            <a href="/staffs/create" class="btn btn-success" role="button">
                Add Staff
            </a>
        </div>
    </div>
    <br />
    @if (Staffs == null)
    {
        <div class="alert alert-info">Loading Staffs...</div>
    }
    else
    {
        <table class="table table-striped align-middle table-bordered responsive-table" id="staffsTable">
            <thead>
                <tr>
                    <th>ID</th>
                    <th>Name</th>
                    <th>Role</th>
                    <th>Actions</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var staff in Staffs)
                {
                    <tr>
                        <td>@staff.ID</td>
                        <td>@staff.StafName</td>
                        <td>@staff.StafRole</td>
                        <td>
                            <a href="/staffs/view/@staff.ID" class="btn btn-primary">
                                <span class="oi oi-book"></span>
                            </a>
                            <a href="/staffs/edit/@staff.ID" class="btn btn-warning">
                                <span class="oi oi-pencil"></span>
                            </a>
                            <button class="btn btn-danger" @onclick="@(()=>Delete(staff.ID))">
                                <span class="oi oi-delete"></span>
                            </button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    }
</div>

@code {
    private List<Staff> Staffs;

    protected async override Task OnInitializedAsync()
    {
        Staffs = await _client.GetFromJsonAsync<List<Staff>>($"{Endpoints.StaffsEndpoint}");
    }

    protected async override Task OnAfterRenderAsync(bool firstRender)
    {
        await js.InvokeVoidAsync("AddDataTable", "#staffsTable");
    }

    public void Dispose()
    {
        js.InvokeVoidAsync("DataTablesDispose", "#staffsTable");
    }

    async Task Delete(int staffID)
    {
        var staff = Staffs.First(q => q.ID == staffID);
        var confirm = await js.InvokeAsync<bool>("confirm", $"Do you want to delete {staff.StafName}?");
        if (confirm)
        {
            await _client.DeleteAsync($"{Endpoints.StaffsEndpoint}/{staffID}");
            await OnInitializedAsync();
        }
    }
}
