@page "/payments/create"
@inject HttpClient _client
@inject IJSRuntime js
@inject NavigationManager _navManager

<div class="container mt-5">
    <h1 class="header">Make Payments</h1>
    <EditForm Model="@payment" OnValidSubmit="@CreatePayment">
        <DataAnnotationsValidator />
        <ValidationSummary />
        <div class="form-group">
            <label>OrderID: </label>
            <div>
                <InputSelect @bind-Value="payment.OrderID" class="form-control">
                    <option value="">--Select Order--</option>
                    @if (Orders != null)
                    {
                        foreach (var order in Orders)
                        {
                            <option value="@order.ID">@order.ID</option>
                        }
                    }
                </InputSelect>
            </div>
        </div>

        <div class="form-group">
            <label>Card Info: </label>
            <div>
                <InputText @bind-Value="@payment.PayCardInfo" class="form-control" />
                <ValidationMessage For="@(() => payment.PayCardInfo)" />
            </div>
        </div>
        <br />
        <button type="submit" class="btn btn-success btn-block">
            Make Payment
        </button>
        <br />
        <button class="btn btn-outline-dark btn-block" @onclick="GoBack">Go Back</button>
    </EditForm>
</div>

@code
{
    Payment payment = new Payment();
    private IList<Order> Orders;

    protected async override Task OnInitializedAsync()
    {
        Orders = await _client.GetFromJsonAsync<List<Order>>($"{Endpoints.OrdersEndpoint}/payment");
    }

    private async Task CreatePayment()
    {
        var order = Orders.FirstOrDefault(x => x.ID == payment.OrderID);
        if (order != null)
        {
            payment.OrderID = order.ID;
            payment.PayFee = order.OrderTotal;
        }
        await _client.PostAsJsonAsync(Endpoints.PaymentsEndpoint, payment);
        _navManager.NavigateTo("/cuspayments/");
    }

    private async Task GoBack()
    {
        await js.InvokeAsync<object>("history.back");
    }
}
