@page "/cuspayments"
@inject HttpClient _client
@inject IJSRuntime js
@attribute [Authorize]
@implements IDisposable

<div class="container mt-5">
    <h1 class="header">Overview of TPharmacy Payment's</h1>
    <h3>Welcome to the Payment Home! </h3>
    <br />
    @if (Payments == null)
    {
        <div class="alert alert-info">Loading payments...</div>
    }
    else
    {
        <table class="table table-striped align-middle table-bordered responsive-table" id="paymentsTable" style="border-top-width: 0px;">
            <thead>
                <tr>
                    <th>ID</th>
                    <th>OrderID</th>
                    <th>OrderTotal</th>
                    <th>PayFee</th>
                    <th>CardInfo</th>
                    <th>Action</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var payment in Payments)
                {
                <tr>
                    <td>@payment.ID</td>
                    <td>@payment.OrderID</td>
                    <td>@payment.Order.OrderTotal</td>
                    <td>@payment.PayFee</td>
                    <td>@payment.PayCardInfo</td>
                    <td>
                        <a href="/payments/view/@payment.ID" class="btn btn-primary">
                            <span class="oi oi-book"></span>
                        </a>
                        <a href="/payments/edit/@payment.ID" class="btn btn-warning">
                            <span class="oi oi-pencil"></span>
                        </a>
                        <button class="btn btn-danger" @onclick="@(()=>Delete(payment.ID))">
                            <span class="oi oi-delete"></span>
                        </button>
                    </td>
                </tr>
                }
            </tbody>
        </table>
    }
</div>


@code {
    private List<Payment> Payments;

    protected async override Task OnInitializedAsync()
    {
        Payments = await _client.GetFromJsonAsync<List<Payment>>($"{Endpoints.PaymentsEndpoint}/customer");
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await js.InvokeVoidAsync("AddDataTable", "#paymentsTable");
    }

    public void Dispose()
    {
        js.InvokeVoidAsync("DataTablesDispose", "#paymentsTable");
    }

    async Task Delete(int paymentID)
    {
        var payment = Payments.First(q => q.ID == paymentID);
        var confirm = await js.InvokeAsync<bool>("confirm", $"Do you want to delete {payment.ID}?");
        if (confirm)
        {
            await _client.DeleteAsync($"{Endpoints.PaymentsEndpoint}/{paymentID}");
            await OnInitializedAsync();
        }
    }
}
